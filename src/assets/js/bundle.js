!function(e){var t={};function i(l){if(t[l])return t[l].exports;var n=t[l]={i:l,l:!1,exports:{}};return e[l].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,l){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:l})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var l=Object.create(null);if(i.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(l,n,function(t){return e[t]}.bind(null,n));return l},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="./dist/",i(i.s=2)}([
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(e){"object"==typeof window&&(i=window)}e.exports=i},
/*!********************************!*\
  !*** ./src/builder.ts-exposed ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./builder.ts */8)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!*****************************!*\
  !*** ./src/main.ts-exposed ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./main.ts */3)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!**********************************************!*\
  !*** ./node_modules/ts-loader!./src/main.ts ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PixiumForm=void 0;const l=i(/*! ./section */4),n=i(/*! ./builder */1),a=i(/*! chartjs */19),r=i(/*! ./data.json */20);t.PixiumForm=class{constructor(e){if(this.sections=[],this.currentNode=0,e.div)if(this.div=e.div,this.mainNode=document.getElementById(this.div),this.mainNode.setAttribute("class","container"),e.data?this.json=e.data:this.json=r,this.json&&this.json.sections){this.json.sections.forEach(e=>{let t=new l.Section(this.mainNode,e,e=>this.moveSection(e));this.sections.push(t)})}else alert("Could not init the module."),console.log(this.json);else alert("Div not found. Cannot display the form")}build(){this.clear(),this.sections.forEach(e=>{e.build(this.mainNode);let t=n.Builder.createElement("button",{class:"pixium-btn"});t.innerText="DELETE",t.onclick=t=>{this.mainNode.removeChild(e.node),this.sections=this.sections.filter((function(t){return t.id!=e.id}))},e.node.appendChild(t)});var e=n.Builder.createElement("button",{class:"pixium-btn"});e.innerText="Add Section",e.onclick=e=>{let i=e.target,n=new l.Section(this.mainNode,null,e=>this.moveSection(e));this.sections.push(n),this.mainNode.removeChild(i),this.mainNode.removeChild(t),n.build(this.mainNode),this.mainNode.appendChild(i),this.mainNode.appendChild(t)},this.mainNode.appendChild(e);var t=n.Builder.createElement("button",{class:"pixium-btn"});t.innerText="GO TO RUN",t.onclick=()=>{this.run()},this.mainNode.appendChild(t)}run(){this.clear(),this.sections.forEach(e=>{e.run(this.mainNode)});var e=n.Builder.createElement("button",{class:"pixium-btn"});e.innerText="SAVE",e.onclick=()=>{this.compileJson()},this.mainNode.appendChild(e);var t=n.Builder.createElement("button",{class:"pixium-btn"});t.innerText="GO TO BUILD MODE",t.onclick=()=>{this.build()},this.mainNode.appendChild(t),this.display()}result(){var e=document.createElement("canvas");this.mainNode.appendChild(e);new a.default(e.getContext("2d"),{type:"line",data:{datasets:[{label:"Test Dataset",data:[{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}})}clear(){this.mainNode&&(this.mainNode.innerHTML="",this.sections.forEach(e=>{e.clear()}),this.currentNode=0)}display(){this.currentNode>=0&&this.currentNode<this.sections.length&&this.sections[this.currentNode].show()}compileJson(){let e;e=[],this.sections.forEach(t=>{e.push(t.compileJson())});JSON.stringify({sections:e});console.log({sections:e})}moveSection(e){e?this.currentNode>=0&&this.currentNode<this.sections.length-1?(this.sections[this.currentNode].hide(),this.currentNode++,this.sections[this.currentNode].show()):alert("You already are on the next slide"):this.currentNode>=1&&this.currentNode<this.sections.length?(this.sections[this.currentNode].hide(),this.currentNode--,this.sections[this.currentNode].show()):alert("You already are on the first slide")}}},
/*!********************************!*\
  !*** ./src/section.ts-exposed ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./section.ts */5)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************!*\
  !*** ./node_modules/ts-loader!./src/section.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Section=void 0;const l=i(/*! ./block/block */6),n=i(/*! ./builder */1);t.Section=class{constructor(e,t,i){this.parent=e,this.blocks=[],this.callback=i,this.title="Default Name",this.id=Math.random().toString(36).substring(7),t&&(t.name&&(this.title=t.name),t.blocks&&t.blocks.forEach(e=>{let t=new l.Block(e);this.blocks.push(t)}))}build(e){this.node=n.Builder.createElement("div",{class:"row pixium-box"}),this.blocks.forEach(e=>{e.build(this.node);let t=n.Builder.createElement("button",{class:"pixium-btn"});t.innerText="DELETE",t.onclick=t=>{this.node.removeChild(e.node),this.blocks=this.blocks.filter((function(t){return t.id!=e.id}))},e.node.appendChild(t)});var t=n.Builder.createElement("button",{class:"pixium-btn"});t.innerText="+",t.onclick=e=>{let t=e.target,i=new l.Block(null);this.blocks.push(i),this.node.removeChild(t),i.build(this.node),this.node.appendChild(t)},this.node.appendChild(t),e.appendChild(this.node)}run(e){this.node=n.Builder.createElement("div",{class:"row pixium-box"});let t=document.createElement("h1");t.innerHTML=this.title;let i=document.createElement("hr");this.node.appendChild(t),this.node.appendChild(i),this.blocks.forEach(e=>{e.run(this.node)});var l=n.Builder.createElement("button",{class:"pixium-btn"});l.innerText="Previous",l.onclick=()=>{this.callback&&this.callback(!1)},this.node.appendChild(l);var a=n.Builder.createElement("button",{class:"pixium-btn"});a.innerText="Next",a.onclick=()=>{this.isCompleted()?this.callback&&this.callback(!0):alert("Form has not been fully completed yet. Please proceed")},this.node.appendChild(a),this.node.style.display="none",e.appendChild(this.node)}clear(){this.node&&(this.node.innerHTML=""),this.blocks.forEach(e=>{e.clear()})}getNode(){return alert(this.node),this.node}show(){this.node.style.display="block"}hide(){this.node.style.display="none"}isCompleted(){let e=!0;return this.blocks.forEach(t=>{t&&!t.answer&&(e=!1)}),e}compileJson(){let e;return e=[],this.blocks.forEach(t=>{e.push(t.compileJson())}),{blocks:e}}}},
/*!************************************!*\
  !*** ./src/block/block.ts-exposed ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./block.ts */7)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*****************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/block.ts ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Block=t.BlockType=void 0;const l=i(/*! ../builder */1),n=i(/*! ./choice */9),a=i(/*! ./blockSlider */11),r=i(/*! ./blockFreetext */13),o=i(/*! ./blockRadio */15),s=i(/*! ./blockCheckbox */17);var d;!function(e){e[e.FREETEXT=1]="FREETEXT",e[e.RADIO=2]="RADIO",e[e.SLIDER=3]="SLIDER",e[e.CHECKBOX=4]="CHECKBOX"}(d=t.BlockType||(t.BlockType={}));t.Block=class{constructor(e=null){this.json=e,this.text="",this.type=1,this.min="",this.max="",this.step="",this.answer="",this.name="",this.id=Math.random().toString(36).substring(7),e&&(e.title&&(this.text=e.title),e.type&&(this.type=e.type),this.answer="",e.answer&&(this.answer=e.answer),e.name&&(this.name=e.name),e.min&&(this.min=e.min),e.max&&(this.max=e.max),e.step&&(this.step=e.step),this.choices=[],this.type!==d.RADIO&&this.type!==d.CHECKBOX||e.choices&&e.choices.forEach(e=>{let t=new n.Choice(e);this.choices.push(t)}))}clear(){this.node&&(this.node.innerHTML="")}build(e){this.node=l.Builder.createElement("div",{class:"row pixium-block-build"});let t=l.Builder.createElement("hr",{class:"pixium-hr col-md-12"});l.Builder.addBuilderInputText(this.node,this.id,this.text,"Text",e=>{this.text=e},"col-md-4"),l.Builder.addBuilderInputText(this.node,this.id,this.name,"Name",e=>{this.name=e},"col-md-4");let i=Object.keys(d).filter(e=>e.match(/^\D/)).map(e=>({name:e,value:d[e]}));l.Builder.addBuilderInputDropdown(this.node,this.id,this.type,"Type",e=>{this.type=Number(e),this.answer="",this.triggerSubElementBlock()},i,"col-md-4");let n="";this.type!==d.SLIDER&&(n="display:none;");let a=l.Builder.createElement("div",{id:"slider_block_"+this.id,class:"row col-md-12",style:n});l.Builder.addBuilderInputText(a,this.id,this.min,"Min",e=>{this.min=e},"col-md-4"),l.Builder.addBuilderInputText(a,this.id,this.max,"Max",e=>{this.max=e},"col-md-4"),l.Builder.addBuilderInputText(a,this.id,this.step,"Step",e=>{this.step=e},"col-md-4"),l.Builder.addBuilderInputText(this.node,this.id,this.choices,"Choices",e=>{this.choices=e}),this.node.appendChild(a),this.node.appendChild(t),e.appendChild(this.node)}run(e){let t=l.Builder.createElement("p");switch(t.innerHTML=this.text,this.node=l.Builder.createElement("div"),this.node.appendChild(t),this.type){case d.RADIO:o.BlockRadio.run(this.node,this);break;case d.CHECKBOX:s.BlockCheckbox.run(this.node,this);break;case d.FREETEXT:r.BlockFreetext.run(this.node,this);break;case d.SLIDER:a.BlockSlider.run(this.node,this)}let i=l.Builder.createElement("hr",{class:"pixium-hr"});this.node.appendChild(i),e.appendChild(this.node)}display(){}triggerSubElementBlock(){let e=null;(e=document.getElementById("slider_block_"+this.id))?this.type===d.SLIDER?e.style.display="block":e.style.display="none":alert("Node not found")}compileJson(){return this.json={type:this.type,text:this.text,answer:this.answer,name:this.name,min:this.min,max:this.max,step:this.step},this.json}}},
/*!*************************************************!*\
  !*** ./node_modules/ts-loader!./src/builder.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Builder=void 0;class l{static createElement(e,t=null){if(!e)return void alert("Could not build the element");let i=document.createElement(e);if(t)for(var l in t){var n=t[l];i.setAttribute(l,n)}return i}static setAttributes(e,t=null){if(t)for(var i in t){var l=t[i];e.setAttribute(i,l)}}static addBuilderInputText(e,t,i,n,a,r="col-md-12"){let o=l.createElement("div",{class:"pixium-row-block "+r}),s=l.createElement("label");s.innerHTML=n+": ";let d=l.createElement("input",{class:"pixium-textbox",type:"text",value:i,name:n+"_"+t,style:"color:Red"});d.onblur=e=>{console.log(e.target),a(e.target.value)},o.appendChild(s),o.appendChild(d),e.appendChild(o)}static addBuilderInputDropdown(e,t,i,n,a,r,o="col-md-12"){let s=l.createElement("div",{class:"pixium-row-block "+o}),d=l.createElement("label");d.innerHTML=n+": ";let h=l.createElement("select",{class:"pixium-dropdown",value:i,name:n+"_"+t,style:"display:block"});h.onchange=e=>{a(e.target.value)},r.forEach(e=>{let t=l.createElement("option",{value:e.value});i===e.value&&l.setAttributes(t,{selected:"selected"}),t.innerHTML=e.name,h.appendChild(t)}),s.appendChild(d),s.appendChild(h),e.appendChild(s)}}t.Builder=l},
/*!*************************************!*\
  !*** ./src/block/choice.ts-exposed ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./choice.ts */10)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!******************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/choice.ts ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Choice=void 0;t.Choice=class{constructor(e){e&&(e.text&&(this.text=e.text),e.label&&(this.label=e.label),e.value&&(this.value=e.value))}}},
/*!******************************************!*\
  !*** ./src/block/blockSlider.ts-exposed ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockSlider.ts */12)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!***********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockSlider.ts ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockSlider=void 0;const l=i(/*! ../builder */1);t.BlockSlider=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","elementContainer");let n=document.createElement("input"),a=l.Builder.createElement("span",{class:"_left"});a.innerHTML=t.min;let r=l.Builder.createElement("span",{class:"_right"});r.innerHTML=t.max,l.Builder.setAttributes(n,{class:"pixium-slider",type:"range",value:t.answer,min:t.min,max:t.max,name:t.name,id:"inputrange_"+t.name}),t.step&&n.setAttribute("step",t.step),n.onchange=()=>{t.answer=parseFloat(n.value),console.log(n);document.getElementById("output_"+t.name).innerHTML=t.answer};let o=l.Builder.createElement("div"),s=l.Builder.createElement("output",{id:"output_"+t.name});s.innerHTML=t.answer,o.appendChild(a),o.appendChild(n),o.appendChild(r),o.appendChild(s),i.appendChild(o),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockFreetext.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockFreetext.ts */14)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockFreetext.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockFreetext=void 0;const l=i(/*! ../builder */1);t.BlockFreetext=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","elementContainer");let n=document.createElement("input");l.Builder.setAttributes(n,{class:"pixium-textbox",type:"text",value:t.answer,name:this.name,style:"color:Red"}),n.onblur=()=>{t.answer=n.value,console.log(t.answer)},i.appendChild(n),e.appendChild(i)}}},
/*!*****************************************!*\
  !*** ./src/block/blockRadio.ts-exposed ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockRadio.ts */16)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!**********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockRadio.ts ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockRadio=void 0;const l=i(/*! ../builder */1);t.BlockRadio=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","elementContainer"),t.choices.forEach(e=>{let n=l.Builder.createElement("input",{type:"radio",name:t.name,value:e.value+""}),a=l.Builder.createElement("label");a.innerHTML=e.label;let r=l.Builder.createElement("div");r.appendChild(n),r.appendChild(a),i.appendChild(r),n.onclick=e=>{console.log(e.target),t.answer=e.target.value,console.log(t.answer)}}),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockCheckbox.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockCheckbox.ts */18)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockCheckbox.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockCheckbox=void 0;const l=i(/*! ../builder */1);t.BlockCheckbox=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","elementContainer"),t.choices.forEach(e=>{let n=l.Builder.createElement("input",{type:"checkbox",name:t.name,value:e.value+"",id:e.value+""});for(var a=0;a<t.answer.length;a++)e.value+""===t.answer[a]&&l.Builder.setAttributes(n,{checked:!0});let r=l.Builder.createElement("label");r.innerHTML=e.label;let o=l.Builder.createElement("div");o.appendChild(n),o.appendChild(r),i.appendChild(o),n.onclick=e=>{let i=document.querySelectorAll('input[type=checkbox][name="'+t.name+'"]:checked'),l=[];i.forEach(e=>{l.push(e.value)}),t.answer=l}}),e.appendChild(i)}}},
/*!***************************************!*\
  !*** ./node_modules/chartjs/chart.js ***!
  \***************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";var l,n;Math.log2=Math.log2||function(e){return Math.log(e)/Math.LN2},Math.log10=Math.log10||function(e){return Math.log(e)/Math.LN10},l={avg:function(e){for(var t=0,i=0;i<e.length;++i)t+=e[i];return t/e.length},min:function(e){if(0===e.length)return 0;for(var t=e[0],i=1;i<e.length;++i){var n=e[i];Array.isArray(n)&&(n=l.avg(n)),n<t&&(t=n)}return Math.max(0,t)},max:function(e){for(var t=0,i=0;i<e.length;++i){var n=e[i];Array.isArray(n)&&(n=l.avg(n)),n>t&&(t=n)}return Math.max(0,t)},upperMax:function(e){for(var t=0,i=0;i<e.length;++i){var n=e[i];Array.isArray(n)&&(n=l.max(n)),n>t&&(t=n)}return Math.max(0,t)},lowerMin:function(e){if(0===e.length)return 0;var t=e[0]||1/0;Array.isArray(t)&&(t=l.lowerMin(t));for(var i=1;i<e.length;++i){var n=e[i];null!=n&&(Array.isArray(n)&&(n=l.lowerMin(n)),n<t&&(t=n))}return!isNaN(t)&&isFinite(t)||(t=0),Math.max(0,t)},niceNumbers:function(e,t){var i=Math.floor(Math.log10(e)),l=e/Math.pow(10,i);return(t?l<1.5?1:l<3?2:l<7?5:10:l<=1?1:l<=2?2:l<=5?5:10)*Math.pow(10,i)},getLinearTicks:function(e,t,i){var n=l.niceNumbers(t-e,!1),a=l.niceNumbers(n/(i-1),!0);return[Math.floor(e/a)*a,Math.ceil(t/a)*a,a]},getFont:function(e){return e.style=e.style||"normal",e.variant=e.variant||"normal",e.weight=e.weight||"lighter",e.size=e.size||"12",e.family=e.family||"Arial",[e.style,e.variant,e.weight,e.size+"px",e.family].join(" ")},getAxisRatio:function(e,t,i){return(i-e)/(t-e)}},n=function(){function e(e,t){for(var i in this.mouseListeners=[],this.currentHint=null,this.fillRegions=[],this.options={font:"Helvetica",fontWeight:"normal",fontSizeTitle:24,fontSizeAxes:20,fontSizeTicks:18,fontSizeLabels:18,fontDataTags:18,fontSizeLegend:18,fontSizeHint:18,paddingPercentBars:.1,paddingPercentTicks:.15,paddingPixelsVertical:10,paddingPixelsHorizontal:10,paddingPixelsTicks:10,maxWidthBars:0,fillColorBackground:"rgb(255, 255, 255)",strokeColorBars:"rgb(0, 0, 0)",fillColorBars:"rgba(180, 180, 180, 0.25)",scaleStyle:"linear",barStyle:"none",stackedBarPadding:3,defaultMaxTick:0,pixelsLegendSquare:10,radiusDot:5,fillColorLegend:"rgb(230, 230, 230)",tickFormatter:null,tickFormatterMeasure:null,fillRegion:"normal"},t=t||{},this.options)t.hasOwnProperty(i)&&(this.options[i]=t[i]);this.ctx=e,this.content={},this.labelPositions={}}return e.prototype.update=function(e){if("object"!=typeof e)throw new Error("Collections must be objects.");if(!e.hasOwnProperty("labels")||!e.hasOwnProperty("data"))throw new Error("Collection must specify labels and data.");if(!Array.isArray(e.labels)||!Array.isArray(e.data))throw new Error("Labels and data must be arrays.");if(e.labels.length!==e.data.length)throw new Error("Labels and data length must match.");e._data_standard_deviation=[],e._data_standard_error=[];for(var t=0;t<e.data.length;++t){var i=Array.isArray(e.data[t]);if("log2"===this.options.scaleStyle)if(i)for(var n=0;n<e.data[t].length;++n)e.data[t][n]=Math.log2(e.data[t][n]);else e.data[t]=Math.log2(e.data[t]);if(i){for(var a=l.avg(e.data[t]),r=0,o=0;o<e.data[t].length;++o)r+=Math.pow(a-e.data[t][o],2);r=Math.sqrt(r/(e.data[t].length-1)),e._data_standard_deviation.push(r),e._data_standard_error.push(r/Math.sqrt(e.data[t].length))}else e._data_standard_deviation.push(0),e._data_standard_error.push(0)}this.content=e,this.redraw()},e.prototype.redraw=function(){setTimeout(function(){this._draw()}.bind(this),0)},e.prototype.mousemove=function(e,t){for(var i=null,l=0;l<this.mouseListeners.length&&!(i=this.mouseListeners[l](e,t));++l);if(i&&"object"==typeof i&&i.hasOwnProperty("index")&&i.hasOwnProperty("drawIndex")){var n=this.currentHint;null!=n&&n.index==i.index&&n.drawIndex==i.drawIndex||(this.currentHint=i,this.redraw())}else null!==this.currentHint&&(this.currentHint=null,this.redraw())},e.prototype._draw=function(){var e={};this.mouseListeners=[],this.fillRegions=[];var t=this.options,i=this.ctx,n=this.content,a=i.canvas.width,r=i.canvas.height;i.clearRect(0,0,a,r),i.translate(-.5,-.5);var o,s=a,d=r;null!=t.fillColorBackground&&(i.save(),i.fillStyle=t.fillColorBackground,i.fillRect(0,0,a,r),i.restore());var h=t.paddingPixelsHorizontal;d-=t.paddingPixelsHorizontal,i.fillStyle="rgb(0, 0, 0)",null!=n.title&&(i.save(),i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeTitle,family:t.font}),i.textAlign="center",i.fillText(n.title,a/2,h+t.fontSizeTitle),i.restore(),d-=1.25*t.fontSizeTitle,h+=1.25*t.fontSizeTitle);var c=t.paddingPixelsVertical;s-=t.paddingPixelsVertical;var u,f,p=null;if(null!=n.yAxis&&(p=c+.5*t.fontSizeAxes,s-=1.25*t.fontSizeAxes,c+=1.25*t.fontSizeAxes),i.save(),i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeTicks,family:t.font}),"stacked"===t.barStyle){u=0,f=1/0;for(var m=0;m<n.data.length;++m){var g;if(Array.isArray(g=n.data[m])){for(var b=0,y=0;y<g.length;++y)b+=g[y];u=Math.max(u,b),f=Math.min(f,b)}else u=Math.max(u,n.data[m]),f=Math.min(f,n.data[m])}}else u=l.upperMax(n.data),f=l.lowerMin(n.data);if(0===t.scaleStyle.indexOf("adaptive")){if(-1!==t.scaleStyle.indexOf(":")){var x=parseFloat(t.scaleStyle.split(/[:]/)[1]);f*=x,u*=1+(1-x)/2}}else f=0;if(t.defaultMaxTick>u&&(u=t.defaultMaxTick),null!=n.bars&&Array.isArray(n.bars))for(o=0;o<n.bars.length;++o){var v=n.bars[o].value;isNaN(v)||(u=Math.max(u,v),f=Math.min(f,v))}var k="log2"==t.scaleStyle?Math.ceil(Math.pow(2,u)):Math.ceil(u)+".00";if(null!=t.tickFormatterMeasure&&(k=t.tickFormatterMeasure),k=i.measureText(k).width,s-=k=Math.ceil(k)+t.paddingPixelsTicks,c+=k,i.restore(),t.paddingPixelsVertical,s-=t.paddingPixelsVertical,null!=n.legend&&Array.isArray(n.legend)){i.save(),i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeLegend,family:t.font});for(var T=0,S=0;S<n.legend.length;++S)T=Math.max(T,i.measureText(n.legend[S].label).width);T=Math.ceil(T),T+=t.pixelsLegendSquare+8;var M,w,A=Math.floor((s-2*t.paddingPixelsHorizontal)/T),B=Math.ceil(n.legend.length/A)*t.fontSizeLegend*1.5;for(d-=B,P+=B,i.strokeStyle="rgb(0, 0, 0)",i.fillStyle=t.fillColorLegend,i.beginPath(),i.moveTo(M=c,w=h+d),i.lineTo(M+s,w),i.lineTo(M+s,w+B),i.lineTo(M,w+B),i.lineTo(M,w),i.stroke(),i.fill(),S=0;S<n.legend.length;++S){var E=Math.floor(S/A),C=S%A;i.fillStyle=n.legend[S].color;var L=M+C*T+3,z=w+E*t.fontSizeLegend*1.5+.5*t.fontSizeLegend;i.beginPath(),i.moveTo(L,z),i.lineTo(L+t.pixelsLegendSquare,z),i.lineTo(L+t.pixelsLegendSquare,z+t.pixelsLegendSquare),i.lineTo(L,z+t.pixelsLegendSquare),i.lineTo(L,z),i.fill(),i.stroke(),i.textAlign="left",i.fillStyle="rgb(0, 0, 0)",i.fillText(n.legend[S].label,L+3+t.pixelsLegendSquare,z+.5*t.fontSizeLegend)}i.restore()}var P=t.paddingPixelsHorizontal;d-=t.paddingPixelsHorizontal,null!=n.xAxis&&(i.save(),i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeAxes,family:t.font}),i.fillStyle="rgb(0, 0, 0)",i.textAlign="center",i.fillText(n.xAxis,a-s+s/2,h+d-P),d-=1.5*t.fontSizeAxes,P+=1.5*t.fontSizeAxes,i.restore());var _=s/n.data.length;if(null!=n.topLabels){for(i.save(),i.textAlign="center",i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeLabels,family:t.font}),d-=1.5*t.fontSizeLabels,h+=1.5*t.fontSizeLabels,o=0;o<n.topLabels.length;++o)i.fillText(n.topLabels[o],c+o*_+_/2,h-t.fontSizeLabels/2);i.restore()}i.save();var N=0;if(null!=n.dataTags){i.font=l.getFont({weight:t.fontWeight,size:t.fontDataTags,family:t.font});var H=n.dataTags;for(o=0;o<H.length;++o)if(Array.isArray(H[o]))for(var I=0;I<H[o].length;++I)N=Math.max(N,Math.ceil(i.measureText(H[o][I]).width+5));else N=Math.max(N,Math.ceil(i.measureText(H[o]).width+5))}i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeLabels,family:t.font});var O=Math.floor(_*t.paddingPercentBars/2),R=_-2*O;R<N?(O-=Math.ceil((N-R)/2),O=Math.max(0,O)):t.maxWidthBars>0&&R>t.maxWidthBars&&(O=Math.floor((_-t.maxWidthBars)/2));var D=0,F=1;for(o=0;o<n.labels.length;++o){var j=n.labels[o];if(Array.isArray(j))for(F=Math.max(F,j.length),I=0;I<j.length;++I)D=Math.max(D,i.measureText(j[I]).width);else D=Math.max(D,i.measureText(j).width)}var W=!1;D>_-O?(i.textAlign="right",i.rotate(1.5*Math.PI),W=!0):i.textAlign="center";var q=-t.fontSizeLabels;for(o=0;o<n.labels.length;++o){var J=n.labels[o],X=c+o*_+_/2,V=h+d-t.fontSizeLabels/2;if(W){if((V=[X,X=-(V=h+d-D+5)][0])<q+t.fontSizeLabels)continue;q=V}var K=t.fontSizeLabels*(F-1);if(Array.isArray(J))for(W&&(K=t.fontSizeLabels*(J.length-1.5),K/=2),I=0;I<J.length;++I)i.fillText(J[I],X,V-K),K-=t.fontSizeLabels;else W&&(K=.25*-t.fontSizeLabels),i.fillText(J,X,V-K)}if(W)d-=D+5,P+=D+5;else{var G=t.fontSizeLabels*F;d-=G+=.5*t.fontSizeLabels,P+=G}i.restore();var U=c,Y=c+s,Q=h,Z=h+d;for(o=0;o<n.labels.length;++o)e[o]={xStart:c+o*_,xEnd:c+(1+o)*_,yStart:Q,yEnd:Z};i.save(),i.strokeStyle="rgb(0, 0, 0)",i.beginPath(),null!=n.topLabels?(i.moveTo(Y,Q),i.lineTo(U,Q)):i.moveTo(U,Q),i.lineTo(U,Z),i.lineTo(Y,Z),null!=n.topLabels&&i.lineTo(c+s,h),i.stroke(),i.restore(),null!=n.topLabel&&(i.save(),i.textAlign="right",i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeLabels,family:t.font}),i.fillText(n.topLabel,c-3,h-t.fontSizeLabels/2),i.restore()),null!=n.yAxis&&(i.save(),i.rotate(1.5*Math.PI),i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeAxes,family:t.font}),i.fillStyle="rgb(0, 0, 0)",i.textAlign="center",i.fillText(n.yAxis,-(h+d/2),p),i.restore()),i.save(),i.fillStyle="rgb(0, 0, 0)",i.strokeStyle="rgba(0, 0, 0, 0.20)",i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeTicks,family:t.font}),i.textAlign="right";var $=l.getLinearTicks(0,u,Math.max(2,d/(t.fontSizeTicks*(1+t.paddingPercentTicks)))),ee=u/t.fontSizeTicks;u=$[1],u+=u>1?Math.ceil(ee):ee;for(var te=[];$[0]<=$[1];)te.push($[0]),$[0]+=$[2];for(o=0;o<te.length;++o){var ie=Math.round(d*l.getAxisRatio(f,u,te[o]));ie<0||("log2"==t.scaleStyle&&0!==te[o]?te[o]=Math.round(Math.pow(2,te[o])):te[o]=Math.floor(100*te[o])/100,null!=t.tickFormatter&&"function"==typeof t.tickFormatter?i.fillText(t.tickFormatter(te[o]).toString(),c-t.paddingPixelsTicks,h+d-ie):i.fillText(te[o].toString(),c-t.paddingPixelsTicks,h+d-ie),0!=o&&(i.beginPath(),i.moveTo(c,h+d-ie),i.lineTo(c+s,h+d-ie),i.stroke()))}if(i.restore(),null!=n.bars&&Array.isArray(n.bars)){for(i.save(),o=0;o<n.bars.length;++o){var le=n.bars[o];if(!(le.value>u)){var ne=h+d-Math.round(d*l.getAxisRatio(f,u,le.value));i.strokeStyle=le.style,i.fillStyle=le.style,i.beginPath(),i.moveTo(U,ne),i.lineTo(Y,ne),i.stroke(),i.fill()}}i.restore()}i.save();var ae=null;for(o=0;o<n.data.length;++o){var re=null,oe=null;null!=n.fillColor?Array.isArray(n.fillColor)?re=i.fillStyle=n.fillColor[o]:i.fillStyle=n.fillColor:i.fillStyle=t.fillColorBars,null!=n.strokeColor?Array.isArray(n.strokeColor)?oe=i.strokeStyle=n.strokeColor[o]:i.strokeStyle=n.strokeColor:i.strokeStyle=t.strokeColorBars;var se=n.data[o],de=Array.isArray(se),he=c+_*o;if(de&&"stacked"===t.barStyle){for(var ce=0,ue=0,fe=0;fe<se.length;++fe){null!=re&&Array.isArray(re)&&(i.fillStyle=re[fe]||t.fillColorBars),null!=oe&&Array.isArray(oe)&&(i.strokeStyle=oe[fe]||t.strokeColorBars),ce+=se[fe];var pe=Math.floor(d*l.getAxisRatio(f,u,ce)),me=h+d-pe;if(Math.abs(pe-ue)<t.stackedBarPadding+2)ue=pe;else{var ge,be,ye,xe,ve,ke=fe>0?t.stackedBarPadding:0;if(i.beginPath(),i.moveTo(ge=he+O,be=h+d-ue-ke),i.lineTo(he+O,me),i.lineTo(ye=he+(_-1)-O,xe=me),i.lineTo(he+(_-1)-O,h+d-ue-ke),fe>0&&i.lineTo(ge,be),i.stroke(),i.fill(),null!=n.hints&&null!=n.hints[o]&&null!=(Pe=n.hints[o][fe])&&this.mouseListeners.push(function(e,t,i,l,n,a,r,o,s){var d=Math.min(l,a),h=Math.max(l,a),c=Math.min(n,r),u=Math.max(n,r);return o<d||o>h||s<c||s>u?null:{index:e,drawIndex:t,rect:{left:d,right:h,top:c,bottom:u},text:i.split("\n")}}.bind(this,o,fe,Pe,ge,be,ye,xe)),be-me>1.25*t.fontDataTags&&null!=n.dataTags&&null!=(ve=n.dataTags[o])&&null!=(ve=ve[fe])){var Te=i.fillStyle;i.fillStyle="rgb(0, 0, 0)",i.font=l.getFont({weight:t.fontWeight,size:t.fontDataTags,family:t.font}),i.textAlign="center",i.fillText(ve,he+_/2,be-.25*t.fontDataTags),i.fillStyle=Te}ue=pe}}null!=n.barTooltips&&(i.fillStyle="rgb(0, 0, 0)",i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeLabels,family:t.font}),i.textAlign="center",i.fillText(n.barTooltips[o]||"",he+_/2,me-3))}else if("line"===t.barStyle){if(de){var Se=he+_/2;if("background"===t.fillRegion&&(Be=ae,Array.isArray(Be)&&(Be=Be[0]),null!=Be)){var Me=i.fillStyle;i.fillStyle=Be.color,i.fillRect(Be.x,Q,Se-Be.x,Z-Q),i.fillStyle=Me}var we=[];for(fe=0;fe<se.length;++fe){var Ae=h+d-Math.round(d*l.getAxisRatio(f,u,se[fe]));null!=ae&&(Array.isArray(ae)?(Le=(ae[fe]||{}).x,ze=(ae[fe]||{}).y):(Le=ae.x,ze=ae.y),Le&&ze&&(Array.isArray(oe)?i.strokeStyle=oe[fe]||t.strokeColorBars:i.strokeStyle=oe||"rgb(0, 0, 0)",i.beginPath(),i.moveTo(Le,ze),i.lineTo(Se,Ae),i.stroke())),Array.isArray(re)&&(i.fillStyle=re[fe]||t.fillColorBars),Array.isArray(oe)&&(i.strokeStyle=oe[fe]||t.strokeColorBars),i.beginPath(),i.arc(Se,Ae,t.radiusDot,0,2*Math.PI),i.stroke(),i.fill(),we[fe]={x:Se,y:Ae,color:i.fillStyle}}ae=we,null!=Be&&Be.color!=ae[0].color&&this.fillRegions.push({x:ae[0].x,y:ae[0].y,prev:Be.color,next:ae[0].color}),null!=n.balls&&Array.isArray(n.balls)&&o<n.balls.length&&null!=(Ee=n.balls[o])&&(i.beginPath(),i.fillStyle=Ee.fill,i.strokeStyle=Ee.stroke,i.arc(Se,h+d-d*l.getAxisRatio(f,u,f+Ee.value),Ee.radius,0,2*Math.PI),i.stroke(),i.fill())}else{var Be,Ee;if(Se=he+_/2,Ae=h+d-Math.round(d*l.getAxisRatio(f,u,se)),"background"===t.fillRegion&&null!=ae&&(Be=ae,Array.isArray(Be)&&(Be=Be[0]),Me=i.fillStyle,i.fillStyle=Be.color,i.fillRect(Be.x,Q,Se-Be.x,Z-Q),i.fillStyle=Me),i.beginPath(),i.arc(Se,Ae,t.radiusDot,0,2*Math.PI),i.stroke(),i.fill(),null!=ae)if(Array.isArray(ae))for(var Ce in ae)ae.hasOwnProperty(Ce)&&(Le=ae[Ce].x,ze=ae[Ce].y,Le&&ze&&(i.strokeStyle=oe||"rgb(0, 0, 0)",i.beginPath(),i.moveTo(Le,ze),i.lineTo(Se,Ae),i.stroke()));else{var Le=ae.x,ze=ae.y;Le&&ze&&(i.strokeStyle=oe||"rgb(0, 0, 0)",i.beginPath(),i.moveTo(Le,ze),i.lineTo(Se,Ae),i.stroke())}ae={x:Se,y:Ae,color:i.fillStyle},null!=Be&&Be.color!=ae.color&&this.fillRegions.push({x:ae.x,y:ae.y,prev:Be.color,next:ae.color}),null!=n.balls&&Array.isArray(n.balls)&&o<n.balls.length&&null!=(Ee=n.balls[o])&&(i.beginPath(),i.fillStyle=Ee.fill,i.strokeStyle=Ee.stroke,i.arc(Se,h+d-d*l.getAxisRatio(f,u,f+Ee.value),Ee.radius,0,2*Math.PI),i.stroke(),i.fill())}var Pe;null!=n.hints&&null!=(Pe=n.hints[o])&&this.mouseListeners.push(function(e,t,i,l,n,a,r,o){var s=Math.min(i,n),d=Math.max(i,n),h=Math.min(l,a),c=Math.max(l,a);return r<s||r>d||o<h||o>c?null:{index:e,drawIndex:fe,rect:{left:s,right:d,top:h,bottom:c},text:t.split("\n")}}.bind(this,o,Pe,Se-1,h,Se+1,h+d))}else{de&&(se=l.avg(se));var _e,Ne=h+d-Math.round(d*l.getAxisRatio(f,u,se));if(i.beginPath(),i.moveTo(he+O,h+d),i.lineTo(he+O,Ne),i.lineTo(he+(_-1)-O,Ne),i.lineTo(he+(_-1)-O,h+d),i.stroke(),i.fill(),"error"===t.barStyle&&0!=(_e=n._data_standard_error[o])){var He=Math.round(d*l.getAxisRatio(f,u,_e));i.beginPath();var Ie=Math.round((_-2*O)/8),Oe=c+_*o+_/2;i.moveTo(Oe-Ie,Ne+He),i.lineTo(Oe+Ie,Ne+He),i.moveTo(Oe,Ne+He),i.lineTo(Oe,Ne-He),i.moveTo(Oe-Ie,Ne-He),i.lineTo(Oe+Ie,Ne-He),i.stroke()}null!=n.barTooltips&&(i.fillStyle="rgb(0, 0, 0)",i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeLabels,family:t.font}),i.textAlign="center",i.fillText(n.barTooltips[o]||"",he+_/2,Ne-3))}}if(i.restore(),null!=this.currentHint){i.save();var Re=this.currentHint.rect,De=this.currentHint.text;i.fillStyle="rgb(0, 0, 0)",i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeHint,family:t.font}),i.textAlign="left";var Fe=0;for(o=0;o<De.length;++o)Fe=Math.max(Fe,Math.ceil(i.measureText(De[o]).width));var je=1.5*t.fontSizeHint,We=De.length*je,qe=Re.right+10,Je=(Re.top+Re.bottom)/2;for(qe+(Fe+=10)>a&&(qe=Re.left-Fe-10),Je-We/2<0?Je=Math.ceil(We/2)+1:Je+We/2>r&&(Je=r-We/2-1),i.clearRect(qe,Je-We/2,Fe,We),i.beginPath(),i.rect(qe,Je-We/2,Fe,We),i.stroke(),o=0;o<De.length;++o)i.fillText(De[o],qe+5,Je-We/2+t.fontSizeHint+o*je);i.restore()}i.translate(.5,.5),this.labelPositions=e},e}(),void 0!==e.exports?e.exports=n:window.BarChart=n},
/*!***********************!*\
  !*** ./src/data.json ***!
  \***********************/
/*! exports provided: sections, default */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e){e.exports=JSON.parse('{"sections":[{"name":"block 2","blocks":[{"title":"BLABLA: <br> <br> How BLALBAty to delegate?","name":"q3","type":3,"min":"1","max":"100","step":"1","answer":"1","label":"Delegation"},{"title":"Test Ludo?","name":"q3bis","type":3,"min":"1","max":"10","step":"1","answer":"1","label":"Delegation"}]},{"name":"Block Test Checkbox","blocks":[{"type":2,"name":"q2","title":"How do you feel about meeting new people?","choices":[{"text":"I love meeting new people!","value":1,"label":"Extraverted"},{"text":"Sometimes I like to meet new people, if I\'m in the right mood.","value":2,"label":"Introverted"}]},{"type":4,"name":"q22","title":"How do you feel about meeting new people?","choices":[{"text":"I love meeting new people!","value":1,"label":"Extraverted"},{"text":"Sometimes I like to meet new people, if I\'m in the right mood.","value":2,"label":"Introverted"}]}]},{"name":"block 1","blocks":[{"title":"DDDDELEGATION: <br> <br> How skilled do you feel today about your ability to delegate?","name":"q1","type":1,"group":1,"label":"Delegation"},{"title":"TEST: <br> <br> How sity to delegate?","name":"q2","type":1,"group":1,"label":"Delegation"}]}]}')}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,