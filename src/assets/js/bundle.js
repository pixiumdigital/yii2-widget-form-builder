!function(e){var t={};function i(l){if(t[l])return t[l].exports;var n=t[l]={i:l,l:!1,exports:{}};return e[l].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,l){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:l})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var l=Object.create(null);if(i.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(l,n,function(t){return e[t]}.bind(null,n));return l},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="./dist/",i(i.s=2)}([
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(e){"object"==typeof window&&(i=window)}e.exports=i},
/*!********************************!*\
  !*** ./src/builder.ts-exposed ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./builder.ts */8)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!*****************************!*\
  !*** ./src/main.ts-exposed ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./main.ts */3)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!**********************************************!*\
  !*** ./node_modules/ts-loader!./src/main.ts ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PixiumForm=void 0;const l=i(/*! ./section */4),n=i(/*! ./builder */1),a=i(/*! chartjs */19),r=i(/*! ./data.json */20);t.PixiumForm=class{constructor(e){if(this.sections=[],this.currentNode=0,e.div)if(this.div=e.div,this.mainNode=document.getElementById(this.div),console.log(this.mainNode),this.mainNode.setAttribute("class","container form-container"),e.data?this.json=e.data:this.json=r,e.mode?this.mode=e.mode:this.mode="run",this.json&&this.json.sections){this.json.sections.forEach(e=>{let t=new l.Section(this.mainNode,e,e=>this.moveSection(e));this.sections.push(t)})}else alert("Could not init the module."),console.log(this.json);else alert("Div not found. Cannot display the form")}build(){this.clear(),this.sections.forEach(e=>{e.build(this.mainNode);let t=n.Builder.createElement("button",{class:"pixium-btn"});t.innerText="DELETE",t.onclick=t=>{this.mainNode.removeChild(e.node),this.sections=this.sections.filter((function(t){return t.id!=e.id}))},e.node.appendChild(t)});var e=n.Builder.createElement("button",{class:"pixium-btn"});e.innerText="Add Section",e.onclick=e=>{let i=e.target,n=new l.Section(this.mainNode,null,e=>this.moveSection(e));this.sections.push(n),this.mainNode.removeChild(i),this.mainNode.removeChild(t),n.build(this.mainNode),this.mainNode.appendChild(i),this.mainNode.appendChild(t)},this.mainNode.appendChild(e);var t=n.Builder.createElement("button",{class:"pixium-btn"});t.innerText="GO TO RUN",t.onclick=()=>{this.run()},this.mainNode.appendChild(t)}run(){this.clear(),this.sections.forEach(e=>{e.run(this.mainNode)});var e=n.Builder.createElement("button",{class:"pixium-btn"});e.innerText="SAVE",e.onclick=()=>{this.compileJson()},this.mainNode.appendChild(e);var t=n.Builder.createElement("button",{class:"pixium-btn"});t.innerText="GO TO BUILD MODE",t.onclick=()=>{this.build()},this.mainNode.appendChild(t),this.display()}result(){var e=document.createElement("canvas");this.mainNode.appendChild(e);new a.default(e.getContext("2d"),{type:"line",data:{datasets:[{label:"Test Dataset",data:[{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}})}clear(){this.mainNode&&(this.mainNode.innerHTML="",this.sections.forEach(e=>{e.clear()}),this.currentNode=0)}display(){this.currentNode>=0&&this.currentNode<this.sections.length&&this.sections[this.currentNode].show()}compileJson(){let e;e=[],this.sections.forEach(t=>{e.push(t.compileJson())});let t=JSON.stringify({sections:e});return console.log({sections:e}),t}moveSection(e){e?this.currentNode>=0&&this.currentNode<this.sections.length-1?(this.sections[this.currentNode].hide(),this.currentNode++,this.sections[this.currentNode].show()):alert("You already are on the next slide"):this.currentNode>=1&&this.currentNode<this.sections.length?(this.sections[this.currentNode].hide(),this.currentNode--,this.sections[this.currentNode].show()):alert("You already are on the first slide")}}},
/*!********************************!*\
  !*** ./src/section.ts-exposed ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./section.ts */5)}).call(this,i(/*! ./../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************!*\
  !*** ./node_modules/ts-loader!./src/section.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Section=void 0;const l=i(/*! ./block/block */6),n=i(/*! ./builder */1);t.Section=class{constructor(e,t,i){this.parent=e,this.blocks=[],this.callback=i,this.title="Default Name",this.id=Math.random().toString(36).substring(7),t&&(t.name&&(this.title=t.name),t.blocks&&t.blocks.forEach(e=>{let t=new l.Block(e);this.blocks.push(t)}))}build(e){this.node=n.Builder.createElement("div",{class:"row pixium-box"}),this.blocks.forEach(e=>{e.build(this.node);let t=n.Builder.createElement("button",{class:"pixium-btn"});t.innerText="DELETE",t.onclick=t=>{this.node.removeChild(e.node),this.blocks=this.blocks.filter((function(t){return t.id!=e.id}))},e.node.appendChild(t)});var t=n.Builder.createElement("button",{class:"pixium-btn"});t.innerText="+",t.onclick=e=>{let t=e.target,i=new l.Block(null);this.blocks.push(i),this.node.removeChild(t),i.build(this.node),this.node.appendChild(t)},this.node.appendChild(t),e.appendChild(this.node)}run(e){this.node=n.Builder.createElement("div",{class:"row pixium-box"});let t=document.createElement("h1");t.innerHTML=this.title;let i=document.createElement("hr");this.node.appendChild(t),this.node.appendChild(i),this.blocks.forEach(e=>{e.run(this.node)});var l=n.Builder.createElement("button",{class:"pixium-btn"});l.innerText="Previous",l.onclick=()=>{this.callback&&this.callback(!1)},this.node.appendChild(l);var a=n.Builder.createElement("button",{class:"pixium-btn"});a.innerText="Next",a.onclick=()=>{this.isCompleted()?this.callback&&this.callback(!0):alert("Form has not been fully completed yet. Please proceed")},this.node.appendChild(a),this.node.style.display="none",e.appendChild(this.node)}clear(){this.node&&(this.node.innerHTML=""),this.blocks.forEach(e=>{e.clear()})}getNode(){return alert(this.node),this.node}show(){this.node.style.display="block"}hide(){this.node.style.display="none"}isCompleted(){let e=!0;return this.blocks.forEach(t=>{t&&!t.answer&&(e=!1)}),e}compileJson(){let e;return e=[],this.blocks.forEach(t=>{e.push(t.compileJson())}),{blocks:e}}}},
/*!************************************!*\
  !*** ./src/block/block.ts-exposed ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./block.ts */7)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*****************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/block.ts ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Block=t.BlockType=void 0;const l=i(/*! ../builder */1),n=i(/*! ./choice */9),a=i(/*! ./blockSlider */11),r=i(/*! ./blockFreetext */13),o=i(/*! ./blockRadio */15),s=i(/*! ./blockCheckbox */17);var d;!function(e){e[e.FREETEXT=1]="FREETEXT",e[e.RADIO=2]="RADIO",e[e.SLIDER=3]="SLIDER",e[e.CHECKBOX=4]="CHECKBOX"}(d=t.BlockType||(t.BlockType={}));t.Block=class{constructor(e=null){this.json=e,this.text="",this.type=1,this.min="",this.max="",this.step="",this.answer="",this.name="",this.id=Math.random().toString(36).substring(7),e&&(e.title&&(this.text=e.title),e.type&&(this.type=e.type),this.answer="",e.answer&&(this.answer=e.answer),e.name&&(this.name=e.name),e.min&&(this.min=e.min),e.max&&(this.max=e.max),e.step&&(this.step=e.step),this.choices=[],this.type!==d.RADIO&&this.type!==d.CHECKBOX||e.choices&&e.choices.forEach(e=>{let t=new n.Choice(e);this.choices.push(t)}))}clear(){this.node&&(this.node.innerHTML="")}build(e){this.node=l.Builder.createElement("div",{class:"row pixium-block-build"});let t=l.Builder.createElement("hr",{class:"pixium-hr col-md-12"});l.Builder.addBuilderInputText(this.node,this.id,this.text,"Text",e=>{this.text=e},"col-md-4"),l.Builder.addBuilderInputText(this.node,this.id,this.name,"Name",e=>{this.name=e},"col-md-4");let i=Object.keys(d).filter(e=>e.match(/^\D/)).map(e=>({name:e,value:d[e]}));l.Builder.addBuilderInputDropdown(this.node,this.id,this.type,"Type",e=>{this.type=Number(e),this.answer="",this.triggerSubElementBlock()},i,"col-md-4");let n="";this.type!==d.SLIDER&&(n="display:none;");let a=l.Builder.createElement("div",{id:"slider_block_"+this.id,class:"row col-md-12",style:n});l.Builder.addBuilderInputText(a,this.id,this.min,"Min",e=>{this.min=e},"col-md-4"),l.Builder.addBuilderInputText(a,this.id,this.max,"Max",e=>{this.max=e},"col-md-4"),l.Builder.addBuilderInputText(a,this.id,this.step,"Step",e=>{this.step=e},"col-md-4"),l.Builder.addBuilderInputText(this.node,this.id,this.choices,"Choices",e=>{this.choices=e}),this.node.appendChild(a),this.node.appendChild(t),e.appendChild(this.node)}run(e){let t=l.Builder.createElement("p");switch(t.innerHTML=this.text,this.node=l.Builder.createElement("div"),this.node.appendChild(t),this.type){case d.RADIO:o.BlockRadio.run(this.node,this);break;case d.CHECKBOX:s.BlockCheckbox.run(this.node,this);break;case d.FREETEXT:r.BlockFreetext.run(this.node,this);break;case d.SLIDER:a.BlockSlider.run(this.node,this)}let i=l.Builder.createElement("hr",{class:"pixium-hr"});this.node.appendChild(i),e.appendChild(this.node)}display(){}triggerSubElementBlock(){let e=null;(e=document.getElementById("slider_block_"+this.id))?this.type===d.SLIDER?e.style.display="block":e.style.display="none":alert("Node not found")}compileJson(){return this.json={type:this.type,text:this.text,answer:this.answer,name:this.name,min:this.min,max:this.max,step:this.step},this.json}}},
/*!*************************************************!*\
  !*** ./node_modules/ts-loader!./src/builder.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Builder=void 0;class l{static createElement(e,t=null){if(!e)return void alert("Could not build the element");let i=document.createElement(e);if(t)for(var l in t){var n=t[l];i.setAttribute(l,n)}return i}static setAttributes(e,t=null){if(t)for(var i in t){var l=t[i];e.setAttribute(i,l)}}static addBuilderInputText(e,t,i,n,a,r="col-md-12"){let o=l.createElement("div",{class:"pixium-row-block "+r}),s=l.createElement("label");s.innerHTML=n+": ";let d=l.createElement("input",{class:"pixium-textbox",type:"text",value:i,name:n+"_"+t,style:"color:Red"});d.onblur=e=>{console.log(e.target),a(e.target.value)},o.appendChild(s),o.appendChild(d),e.appendChild(o)}static addBuilderInputDropdown(e,t,i,n,a,r,o="col-md-12"){let s=l.createElement("div",{class:"pixium-row-block "+o}),d=l.createElement("label");d.innerHTML=n+": ";let h=l.createElement("select",{class:"pixium-dropdown",value:i,name:n+"_"+t,style:"display:block"});h.onchange=e=>{a(e.target.value)},r.forEach(e=>{let t=l.createElement("option",{value:e.value});i===e.value&&l.setAttributes(t,{selected:"selected"}),t.innerHTML=e.name,h.appendChild(t)}),s.appendChild(d),s.appendChild(h),e.appendChild(s)}}t.Builder=l},
/*!*************************************!*\
  !*** ./src/block/choice.ts-exposed ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./choice.ts */10)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!******************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/choice.ts ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Choice=void 0;t.Choice=class{constructor(e){e&&(e.text&&(this.text=e.text),e.label&&(this.label=e.label),e.value&&(this.value=e.value))}build(e){}}},
/*!******************************************!*\
  !*** ./src/block/blockSlider.ts-exposed ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockSlider.ts */12)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!***********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockSlider.ts ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockSlider=void 0;const l=i(/*! ../builder */1);t.BlockSlider=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let n=document.createElement("input"),a=l.Builder.createElement("span",{class:"_left"});a.innerHTML=t.min;let r=l.Builder.createElement("span",{class:"_right"});r.innerHTML=t.max,l.Builder.setAttributes(n,{class:"pixium-slider",type:"range",value:t.answer,min:t.min,max:t.max,name:t.name,id:"inputrange_"+t.name}),t.step&&n.setAttribute("step",t.step),n.onchange=()=>{t.answer=parseFloat(n.value),console.log(n);document.getElementById("output_"+t.name).innerHTML=t.answer};let o=l.Builder.createElement("div"),s=l.Builder.createElement("output",{id:"output_"+t.name});s.innerHTML=t.answer,o.appendChild(a),o.appendChild(n),o.appendChild(r),o.appendChild(s),i.appendChild(o),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockFreetext.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockFreetext.ts */14)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockFreetext.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockFreetext=void 0;const l=i(/*! ../builder */1);t.BlockFreetext=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container");let n=document.createElement("input");l.Builder.setAttributes(n,{class:"pixium-textbox",type:"text",value:t.answer,name:this.name,style:"color:Red"}),n.onblur=()=>{t.answer=n.value,console.log(t.answer)},i.appendChild(n),e.appendChild(i)}}},
/*!*****************************************!*\
  !*** ./src/block/blockRadio.ts-exposed ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockRadio.ts */16)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!**********************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockRadio.ts ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockRadio=void 0;const l=i(/*! ../builder */1);t.BlockRadio=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container"),t.choices.forEach(e=>{let n=l.Builder.createElement("input",{type:"radio",name:t.name,value:e.value+""}),a=l.Builder.createElement("label");a.innerHTML=e.label;let r=l.Builder.createElement("div");r.appendChild(n),r.appendChild(a),i.appendChild(r),n.onclick=e=>{console.log(e.target),t.answer=e.target.value,console.log(t.answer)}}),e.appendChild(i)}}},
/*!********************************************!*\
  !*** ./src/block/blockCheckbox.ts-exposed ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){(function(t){e.exports=t.Library=i(/*! -!./node_modules/ts-loader!./blockCheckbox.ts */18)}).call(this,i(/*! ./../../node_modules/webpack/buildin/global.js */0))},
/*!*************************************************************!*\
  !*** ./node_modules/ts-loader!./src/block/blockCheckbox.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BlockCheckbox=void 0;const l=i(/*! ../builder */1);t.BlockCheckbox=class{static run(e,t){let i=document.createElement("div");i.setAttribute("class","element-form-container"),t.choices.forEach(e=>{let n=l.Builder.createElement("input",{type:"checkbox",name:t.name,value:e.value+"",id:e.value+""});for(var a=0;a<t.answer.length;a++)e.value+""===t.answer[a]&&l.Builder.setAttributes(n,{checked:!0});let r=l.Builder.createElement("label");r.innerHTML=e.label;let o=l.Builder.createElement("div");o.appendChild(n),o.appendChild(r),i.appendChild(o),n.onclick=e=>{let i=document.querySelectorAll('input[type=checkbox][name="'+t.name+'"]:checked'),l=[];i.forEach(e=>{l.push(e.value)}),t.answer=l}}),e.appendChild(i)}}},
/*!***************************************!*\
  !*** ./node_modules/chartjs/chart.js ***!
  \***************************************/
/*! no static exports found */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e,t,i){"use strict";var l,n;Math.log2=Math.log2||function(e){return Math.log(e)/Math.LN2},Math.log10=Math.log10||function(e){return Math.log(e)/Math.LN10},l={avg:function(e){for(var t=0,i=0;i<e.length;++i)t+=e[i];return t/e.length},min:function(e){if(0===e.length)return 0;for(var t=e[0],i=1;i<e.length;++i){var n=e[i];Array.isArray(n)&&(n=l.avg(n)),n<t&&(t=n)}return Math.max(0,t)},max:function(e){for(var t=0,i=0;i<e.length;++i){var n=e[i];Array.isArray(n)&&(n=l.avg(n)),n>t&&(t=n)}return Math.max(0,t)},upperMax:function(e){for(var t=0,i=0;i<e.length;++i){var n=e[i];Array.isArray(n)&&(n=l.max(n)),n>t&&(t=n)}return Math.max(0,t)},lowerMin:function(e){if(0===e.length)return 0;var t=e[0]||1/0;Array.isArray(t)&&(t=l.lowerMin(t));for(var i=1;i<e.length;++i){var n=e[i];null!=n&&(Array.isArray(n)&&(n=l.lowerMin(n)),n<t&&(t=n))}return!isNaN(t)&&isFinite(t)||(t=0),Math.max(0,t)},niceNumbers:function(e,t){var i=Math.floor(Math.log10(e)),l=e/Math.pow(10,i);return(t?l<1.5?1:l<3?2:l<7?5:10:l<=1?1:l<=2?2:l<=5?5:10)*Math.pow(10,i)},getLinearTicks:function(e,t,i){var n=l.niceNumbers(t-e,!1),a=l.niceNumbers(n/(i-1),!0);return[Math.floor(e/a)*a,Math.ceil(t/a)*a,a]},getFont:function(e){return e.style=e.style||"normal",e.variant=e.variant||"normal",e.weight=e.weight||"lighter",e.size=e.size||"12",e.family=e.family||"Arial",[e.style,e.variant,e.weight,e.size+"px",e.family].join(" ")},getAxisRatio:function(e,t,i){return(i-e)/(t-e)}},n=function(){function e(e,t){for(var i in this.mouseListeners=[],this.currentHint=null,this.fillRegions=[],this.options={font:"Helvetica",fontWeight:"normal",fontSizeTitle:24,fontSizeAxes:20,fontSizeTicks:18,fontSizeLabels:18,fontDataTags:18,fontSizeLegend:18,fontSizeHint:18,paddingPercentBars:.1,paddingPercentTicks:.15,paddingPixelsVertical:10,paddingPixelsHorizontal:10,paddingPixelsTicks:10,maxWidthBars:0,fillColorBackground:"rgb(255, 255, 255)",strokeColorBars:"rgb(0, 0, 0)",fillColorBars:"rgba(180, 180, 180, 0.25)",scaleStyle:"linear",barStyle:"none",stackedBarPadding:3,defaultMaxTick:0,pixelsLegendSquare:10,radiusDot:5,fillColorLegend:"rgb(230, 230, 230)",tickFormatter:null,tickFormatterMeasure:null,fillRegion:"normal"},t=t||{},this.options)t.hasOwnProperty(i)&&(this.options[i]=t[i]);this.ctx=e,this.content={},this.labelPositions={}}return e.prototype.update=function(e){if("object"!=typeof e)throw new Error("Collections must be objects.");if(!e.hasOwnProperty("labels")||!e.hasOwnProperty("data"))throw new Error("Collection must specify labels and data.");if(!Array.isArray(e.labels)||!Array.isArray(e.data))throw new Error("Labels and data must be arrays.");if(e.labels.length!==e.data.length)throw new Error("Labels and data length must match.");e._data_standard_deviation=[],e._data_standard_error=[];for(var t=0;t<e.data.length;++t){var i=Array.isArray(e.data[t]);if("log2"===this.options.scaleStyle)if(i)for(var n=0;n<e.data[t].length;++n)e.data[t][n]=Math.log2(e.data[t][n]);else e.data[t]=Math.log2(e.data[t]);if(i){for(var a=l.avg(e.data[t]),r=0,o=0;o<e.data[t].length;++o)r+=Math.pow(a-e.data[t][o],2);r=Math.sqrt(r/(e.data[t].length-1)),e._data_standard_deviation.push(r),e._data_standard_error.push(r/Math.sqrt(e.data[t].length))}else e._data_standard_deviation.push(0),e._data_standard_error.push(0)}this.content=e,this.redraw()},e.prototype.redraw=function(){setTimeout(function(){this._draw()}.bind(this),0)},e.prototype.mousemove=function(e,t){for(var i=null,l=0;l<this.mouseListeners.length&&!(i=this.mouseListeners[l](e,t));++l);if(i&&"object"==typeof i&&i.hasOwnProperty("index")&&i.hasOwnProperty("drawIndex")){var n=this.currentHint;null!=n&&n.index==i.index&&n.drawIndex==i.drawIndex||(this.currentHint=i,this.redraw())}else null!==this.currentHint&&(this.currentHint=null,this.redraw())},e.prototype._draw=function(){var e={};this.mouseListeners=[],this.fillRegions=[];var t=this.options,i=this.ctx,n=this.content,a=i.canvas.width,r=i.canvas.height;i.clearRect(0,0,a,r),i.translate(-.5,-.5);var o,s=a,d=r;null!=t.fillColorBackground&&(i.save(),i.fillStyle=t.fillColorBackground,i.fillRect(0,0,a,r),i.restore());var h=t.paddingPixelsHorizontal;d-=t.paddingPixelsHorizontal,i.fillStyle="rgb(0, 0, 0)",null!=n.title&&(i.save(),i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeTitle,family:t.font}),i.textAlign="center",i.fillText(n.title,a/2,h+t.fontSizeTitle),i.restore(),d-=1.25*t.fontSizeTitle,h+=1.25*t.fontSizeTitle);var c=t.paddingPixelsVertical;s-=t.paddingPixelsVertical;var u,f,p=null;if(null!=n.yAxis&&(p=c+.5*t.fontSizeAxes,s-=1.25*t.fontSizeAxes,c+=1.25*t.fontSizeAxes),i.save(),i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeTicks,family:t.font}),"stacked"===t.barStyle){u=0,f=1/0;for(var m=0;m<n.data.length;++m){var g;if(Array.isArray(g=n.data[m])){for(var b=0,y=0;y<g.length;++y)b+=g[y];u=Math.max(u,b),f=Math.min(f,b)}else u=Math.max(u,n.data[m]),f=Math.min(f,n.data[m])}}else u=l.upperMax(n.data),f=l.lowerMin(n.data);if(0===t.scaleStyle.indexOf("adaptive")){if(-1!==t.scaleStyle.indexOf(":")){var x=parseFloat(t.scaleStyle.split(/[:]/)[1]);f*=x,u*=1+(1-x)/2}}else f=0;if(t.defaultMaxTick>u&&(u=t.defaultMaxTick),null!=n.bars&&Array.isArray(n.bars))for(o=0;o<n.bars.length;++o){var v=n.bars[o].value;isNaN(v)||(u=Math.max(u,v),f=Math.min(f,v))}var k="log2"==t.scaleStyle?Math.ceil(Math.pow(2,u)):Math.ceil(u)+".00";if(null!=t.tickFormatterMeasure&&(k=t.tickFormatterMeasure),k=i.measureText(k).width,s-=k=Math.ceil(k)+t.paddingPixelsTicks,c+=k,i.restore(),t.paddingPixelsVertical,s-=t.paddingPixelsVertical,null!=n.legend&&Array.isArray(n.legend)){i.save(),i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeLegend,family:t.font});for(var T=0,S=0;S<n.legend.length;++S)T=Math.max(T,i.measureText(n.legend[S].label).width);T=Math.ceil(T),T+=t.pixelsLegendSquare+8;var M,w,A=Math.floor((s-2*t.paddingPixelsHorizontal)/T),B=Math.ceil(n.legend.length/A)*t.fontSizeLegend*1.5;for(d-=B,P+=B,i.strokeStyle="rgb(0, 0, 0)",i.fillStyle=t.fillColorLegend,i.beginPath(),i.moveTo(M=c,w=h+d),i.lineTo(M+s,w),i.lineTo(M+s,w+B),i.lineTo(M,w+B),i.lineTo(M,w),i.stroke(),i.fill(),S=0;S<n.legend.length;++S){var E=Math.floor(S/A),C=S%A;i.fillStyle=n.legend[S].color;var L=M+C*T+3,z=w+E*t.fontSizeLegend*1.5+.5*t.fontSizeLegend;i.beginPath(),i.moveTo(L,z),i.lineTo(L+t.pixelsLegendSquare,z),i.lineTo(L+t.pixelsLegendSquare,z+t.pixelsLegendSquare),i.lineTo(L,z+t.pixelsLegendSquare),i.lineTo(L,z),i.fill(),i.stroke(),i.textAlign="left",i.fillStyle="rgb(0, 0, 0)",i.fillText(n.legend[S].label,L+3+t.pixelsLegendSquare,z+.5*t.fontSizeLegend)}i.restore()}var P=t.paddingPixelsHorizontal;d-=t.paddingPixelsHorizontal,null!=n.xAxis&&(i.save(),i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeAxes,family:t.font}),i.fillStyle="rgb(0, 0, 0)",i.textAlign="center",i.fillText(n.xAxis,a-s+s/2,h+d-P),d-=1.5*t.fontSizeAxes,P+=1.5*t.fontSizeAxes,i.restore());var _=s/n.data.length;if(null!=n.topLabels){for(i.save(),i.textAlign="center",i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeLabels,family:t.font}),d-=1.5*t.fontSizeLabels,h+=1.5*t.fontSizeLabels,o=0;o<n.topLabels.length;++o)i.fillText(n.topLabels[o],c+o*_+_/2,h-t.fontSizeLabels/2);i.restore()}i.save();var N=0;if(null!=n.dataTags){i.font=l.getFont({weight:t.fontWeight,size:t.fontDataTags,family:t.font});var H=n.dataTags;for(o=0;o<H.length;++o)if(Array.isArray(H[o]))for(var I=0;I<H[o].length;++I)N=Math.max(N,Math.ceil(i.measureText(H[o][I]).width+5));else N=Math.max(N,Math.ceil(i.measureText(H[o]).width+5))}i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeLabels,family:t.font});var O=Math.floor(_*t.paddingPercentBars/2),R=_-2*O;R<N?(O-=Math.ceil((N-R)/2),O=Math.max(0,O)):t.maxWidthBars>0&&R>t.maxWidthBars&&(O=Math.floor((_-t.maxWidthBars)/2));var D=0,F=1;for(o=0;o<n.labels.length;++o){var j=n.labels[o];if(Array.isArray(j))for(F=Math.max(F,j.length),I=0;I<j.length;++I)D=Math.max(D,i.measureText(j[I]).width);else D=Math.max(D,i.measureText(j).width)}var W=!1;D>_-O?(i.textAlign="right",i.rotate(1.5*Math.PI),W=!0):i.textAlign="center";var q=-t.fontSizeLabels;for(o=0;o<n.labels.length;++o){var J=n.labels[o],X=c+o*_+_/2,V=h+d-t.fontSizeLabels/2;if(W){if((V=[X,X=-(V=h+d-D+5)][0])<q+t.fontSizeLabels)continue;q=V}var K=t.fontSizeLabels*(F-1);if(Array.isArray(J))for(W&&(K=t.fontSizeLabels*(J.length-1.5),K/=2),I=0;I<J.length;++I)i.fillText(J[I],X,V-K),K-=t.fontSizeLabels;else W&&(K=.25*-t.fontSizeLabels),i.fillText(J,X,V-K)}if(W)d-=D+5,P+=D+5;else{var G=t.fontSizeLabels*F;d-=G+=.5*t.fontSizeLabels,P+=G}i.restore();var U=c,Y=c+s,Q=h,Z=h+d;for(o=0;o<n.labels.length;++o)e[o]={xStart:c+o*_,xEnd:c+(1+o)*_,yStart:Q,yEnd:Z};i.save(),i.strokeStyle="rgb(0, 0, 0)",i.beginPath(),null!=n.topLabels?(i.moveTo(Y,Q),i.lineTo(U,Q)):i.moveTo(U,Q),i.lineTo(U,Z),i.lineTo(Y,Z),null!=n.topLabels&&i.lineTo(c+s,h),i.stroke(),i.restore(),null!=n.topLabel&&(i.save(),i.textAlign="right",i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeLabels,family:t.font}),i.fillText(n.topLabel,c-3,h-t.fontSizeLabels/2),i.restore()),null!=n.yAxis&&(i.save(),i.rotate(1.5*Math.PI),i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeAxes,family:t.font}),i.fillStyle="rgb(0, 0, 0)",i.textAlign="center",i.fillText(n.yAxis,-(h+d/2),p),i.restore()),i.save(),i.fillStyle="rgb(0, 0, 0)",i.strokeStyle="rgba(0, 0, 0, 0.20)",i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeTicks,family:t.font}),i.textAlign="right";var $=l.getLinearTicks(0,u,Math.max(2,d/(t.fontSizeTicks*(1+t.paddingPercentTicks)))),ee=u/t.fontSizeTicks;u=$[1],u+=u>1?Math.ceil(ee):ee;for(var te=[];$[0]<=$[1];)te.push($[0]),$[0]+=$[2];for(o=0;o<te.length;++o){var ie=Math.round(d*l.getAxisRatio(f,u,te[o]));ie<0||("log2"==t.scaleStyle&&0!==te[o]?te[o]=Math.round(Math.pow(2,te[o])):te[o]=Math.floor(100*te[o])/100,null!=t.tickFormatter&&"function"==typeof t.tickFormatter?i.fillText(t.tickFormatter(te[o]).toString(),c-t.paddingPixelsTicks,h+d-ie):i.fillText(te[o].toString(),c-t.paddingPixelsTicks,h+d-ie),0!=o&&(i.beginPath(),i.moveTo(c,h+d-ie),i.lineTo(c+s,h+d-ie),i.stroke()))}if(i.restore(),null!=n.bars&&Array.isArray(n.bars)){for(i.save(),o=0;o<n.bars.length;++o){var le=n.bars[o];if(!(le.value>u)){var ne=h+d-Math.round(d*l.getAxisRatio(f,u,le.value));i.strokeStyle=le.style,i.fillStyle=le.style,i.beginPath(),i.moveTo(U,ne),i.lineTo(Y,ne),i.stroke(),i.fill()}}i.restore()}i.save();var ae=null;for(o=0;o<n.data.length;++o){var re=null,oe=null;null!=n.fillColor?Array.isArray(n.fillColor)?re=i.fillStyle=n.fillColor[o]:i.fillStyle=n.fillColor:i.fillStyle=t.fillColorBars,null!=n.strokeColor?Array.isArray(n.strokeColor)?oe=i.strokeStyle=n.strokeColor[o]:i.strokeStyle=n.strokeColor:i.strokeStyle=t.strokeColorBars;var se=n.data[o],de=Array.isArray(se),he=c+_*o;if(de&&"stacked"===t.barStyle){for(var ce=0,ue=0,fe=0;fe<se.length;++fe){null!=re&&Array.isArray(re)&&(i.fillStyle=re[fe]||t.fillColorBars),null!=oe&&Array.isArray(oe)&&(i.strokeStyle=oe[fe]||t.strokeColorBars),ce+=se[fe];var pe=Math.floor(d*l.getAxisRatio(f,u,ce)),me=h+d-pe;if(Math.abs(pe-ue)<t.stackedBarPadding+2)ue=pe;else{var ge,be,ye,xe,ve,ke=fe>0?t.stackedBarPadding:0;if(i.beginPath(),i.moveTo(ge=he+O,be=h+d-ue-ke),i.lineTo(he+O,me),i.lineTo(ye=he+(_-1)-O,xe=me),i.lineTo(he+(_-1)-O,h+d-ue-ke),fe>0&&i.lineTo(ge,be),i.stroke(),i.fill(),null!=n.hints&&null!=n.hints[o]&&null!=(Pe=n.hints[o][fe])&&this.mouseListeners.push(function(e,t,i,l,n,a,r,o,s){var d=Math.min(l,a),h=Math.max(l,a),c=Math.min(n,r),u=Math.max(n,r);return o<d||o>h||s<c||s>u?null:{index:e,drawIndex:t,rect:{left:d,right:h,top:c,bottom:u},text:i.split("\n")}}.bind(this,o,fe,Pe,ge,be,ye,xe)),be-me>1.25*t.fontDataTags&&null!=n.dataTags&&null!=(ve=n.dataTags[o])&&null!=(ve=ve[fe])){var Te=i.fillStyle;i.fillStyle="rgb(0, 0, 0)",i.font=l.getFont({weight:t.fontWeight,size:t.fontDataTags,family:t.font}),i.textAlign="center",i.fillText(ve,he+_/2,be-.25*t.fontDataTags),i.fillStyle=Te}ue=pe}}null!=n.barTooltips&&(i.fillStyle="rgb(0, 0, 0)",i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeLabels,family:t.font}),i.textAlign="center",i.fillText(n.barTooltips[o]||"",he+_/2,me-3))}else if("line"===t.barStyle){if(de){var Se=he+_/2;if("background"===t.fillRegion&&(Be=ae,Array.isArray(Be)&&(Be=Be[0]),null!=Be)){var Me=i.fillStyle;i.fillStyle=Be.color,i.fillRect(Be.x,Q,Se-Be.x,Z-Q),i.fillStyle=Me}var we=[];for(fe=0;fe<se.length;++fe){var Ae=h+d-Math.round(d*l.getAxisRatio(f,u,se[fe]));null!=ae&&(Array.isArray(ae)?(Le=(ae[fe]||{}).x,ze=(ae[fe]||{}).y):(Le=ae.x,ze=ae.y),Le&&ze&&(Array.isArray(oe)?i.strokeStyle=oe[fe]||t.strokeColorBars:i.strokeStyle=oe||"rgb(0, 0, 0)",i.beginPath(),i.moveTo(Le,ze),i.lineTo(Se,Ae),i.stroke())),Array.isArray(re)&&(i.fillStyle=re[fe]||t.fillColorBars),Array.isArray(oe)&&(i.strokeStyle=oe[fe]||t.strokeColorBars),i.beginPath(),i.arc(Se,Ae,t.radiusDot,0,2*Math.PI),i.stroke(),i.fill(),we[fe]={x:Se,y:Ae,color:i.fillStyle}}ae=we,null!=Be&&Be.color!=ae[0].color&&this.fillRegions.push({x:ae[0].x,y:ae[0].y,prev:Be.color,next:ae[0].color}),null!=n.balls&&Array.isArray(n.balls)&&o<n.balls.length&&null!=(Ee=n.balls[o])&&(i.beginPath(),i.fillStyle=Ee.fill,i.strokeStyle=Ee.stroke,i.arc(Se,h+d-d*l.getAxisRatio(f,u,f+Ee.value),Ee.radius,0,2*Math.PI),i.stroke(),i.fill())}else{var Be,Ee;if(Se=he+_/2,Ae=h+d-Math.round(d*l.getAxisRatio(f,u,se)),"background"===t.fillRegion&&null!=ae&&(Be=ae,Array.isArray(Be)&&(Be=Be[0]),Me=i.fillStyle,i.fillStyle=Be.color,i.fillRect(Be.x,Q,Se-Be.x,Z-Q),i.fillStyle=Me),i.beginPath(),i.arc(Se,Ae,t.radiusDot,0,2*Math.PI),i.stroke(),i.fill(),null!=ae)if(Array.isArray(ae))for(var Ce in ae)ae.hasOwnProperty(Ce)&&(Le=ae[Ce].x,ze=ae[Ce].y,Le&&ze&&(i.strokeStyle=oe||"rgb(0, 0, 0)",i.beginPath(),i.moveTo(Le,ze),i.lineTo(Se,Ae),i.stroke()));else{var Le=ae.x,ze=ae.y;Le&&ze&&(i.strokeStyle=oe||"rgb(0, 0, 0)",i.beginPath(),i.moveTo(Le,ze),i.lineTo(Se,Ae),i.stroke())}ae={x:Se,y:Ae,color:i.fillStyle},null!=Be&&Be.color!=ae.color&&this.fillRegions.push({x:ae.x,y:ae.y,prev:Be.color,next:ae.color}),null!=n.balls&&Array.isArray(n.balls)&&o<n.balls.length&&null!=(Ee=n.balls[o])&&(i.beginPath(),i.fillStyle=Ee.fill,i.strokeStyle=Ee.stroke,i.arc(Se,h+d-d*l.getAxisRatio(f,u,f+Ee.value),Ee.radius,0,2*Math.PI),i.stroke(),i.fill())}var Pe;null!=n.hints&&null!=(Pe=n.hints[o])&&this.mouseListeners.push(function(e,t,i,l,n,a,r,o){var s=Math.min(i,n),d=Math.max(i,n),h=Math.min(l,a),c=Math.max(l,a);return r<s||r>d||o<h||o>c?null:{index:e,drawIndex:fe,rect:{left:s,right:d,top:h,bottom:c},text:t.split("\n")}}.bind(this,o,Pe,Se-1,h,Se+1,h+d))}else{de&&(se=l.avg(se));var _e,Ne=h+d-Math.round(d*l.getAxisRatio(f,u,se));if(i.beginPath(),i.moveTo(he+O,h+d),i.lineTo(he+O,Ne),i.lineTo(he+(_-1)-O,Ne),i.lineTo(he+(_-1)-O,h+d),i.stroke(),i.fill(),"error"===t.barStyle&&0!=(_e=n._data_standard_error[o])){var He=Math.round(d*l.getAxisRatio(f,u,_e));i.beginPath();var Ie=Math.round((_-2*O)/8),Oe=c+_*o+_/2;i.moveTo(Oe-Ie,Ne+He),i.lineTo(Oe+Ie,Ne+He),i.moveTo(Oe,Ne+He),i.lineTo(Oe,Ne-He),i.moveTo(Oe-Ie,Ne-He),i.lineTo(Oe+Ie,Ne-He),i.stroke()}null!=n.barTooltips&&(i.fillStyle="rgb(0, 0, 0)",i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeLabels,family:t.font}),i.textAlign="center",i.fillText(n.barTooltips[o]||"",he+_/2,Ne-3))}}if(i.restore(),null!=this.currentHint){i.save();var Re=this.currentHint.rect,De=this.currentHint.text;i.fillStyle="rgb(0, 0, 0)",i.font=l.getFont({weight:t.fontWeight,size:t.fontSizeHint,family:t.font}),i.textAlign="left";var Fe=0;for(o=0;o<De.length;++o)Fe=Math.max(Fe,Math.ceil(i.measureText(De[o]).width));var je=1.5*t.fontSizeHint,We=De.length*je,qe=Re.right+10,Je=(Re.top+Re.bottom)/2;for(qe+(Fe+=10)>a&&(qe=Re.left-Fe-10),Je-We/2<0?Je=Math.ceil(We/2)+1:Je+We/2>r&&(Je=r-We/2-1),i.clearRect(qe,Je-We/2,Fe,We),i.beginPath(),i.rect(qe,Je-We/2,Fe,We),i.stroke(),o=0;o<De.length;++o)i.fillText(De[o],qe+5,Je-We/2+t.fontSizeHint+o*je);i.restore()}i.translate(.5,.5),this.labelPositions=e},e}(),void 0!==e.exports?e.exports=n:window.BarChart=n},
/*!***********************!*\
  !*** ./src/data.json ***!
  \***********************/
/*! exports provided: sections, default */
/*! all exports used */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(e){e.exports=JSON.parse('{"sections":[{"name":"block 2","blocks":[{"title":"BLABLA: <br> <br> How BLALBAty to delegate?","name":"q3","type":3,"min":"1","max":"100","step":"1","answer":"1","label":"Delegation"},{"title":"Test Ludo?","name":"q3bis","type":3,"min":"1","max":"10","step":"1","answer":"1","label":"Delegation"}]},{"name":"Block Test Checkbox","blocks":[{"type":2,"name":"q2","title":"How do you feel about meeting new people?","choices":[{"text":"I love meeting new people!","value":1,"label":"Extraverted"},{"text":"Sometimes I like to meet new people, if I\'m in the right mood.","value":2,"label":"Introverted"}]},{"type":4,"name":"q22","title":"How do you feel about meeting new people?","choices":[{"text":"I love meeting new people!","value":1,"label":"Extraverted"},{"text":"Sometimes I like to meet new people, if I\'m in the right mood.","value":2,"label":"Introverted"}]}]},{"name":"block 1","blocks":[{"title":"DDDDELEGATION: <br> <br> How skilled do you feel today about your ability to delegate?","name":"q1","type":1,"group":1,"label":"Delegation"},{"title":"TEST: <br> <br> How sity to delegate?","name":"q2","type":1,"group":1,"label":"Delegation"}]}]}')}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnVpbGRlci50cy1leHBvc2VkIiwid2VicGFjazovLy8uL3NyYy9tYWluLnRzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlY3Rpb24udHMtZXhwb3NlZCIsIndlYnBhY2s6Ly8vLi9zcmMvc2VjdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svYmxvY2sudHMtZXhwb3NlZCIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svYmxvY2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2J1aWxkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Nob2ljZS50cy1leHBvc2VkIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9jaG9pY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrU2xpZGVyLnRzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrU2xpZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9ibG9ja0ZyZWV0ZXh0LnRzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrRnJlZXRleHQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jsb2NrL2Jsb2NrUmFkaW8udHMtZXhwb3NlZCIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svYmxvY2tSYWRpby50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmxvY2svYmxvY2tDaGVja2JveC50cy1leHBvc2VkIiwid2VicGFjazovLy8uL3NyYy9ibG9jay9ibG9ja0NoZWNrYm94LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaGFydGpzL2NoYXJ0LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZyIsInRoaXMiLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJkYXRhIiwicGFyYW1zIiwic2VjdGlvbnMiLCJjdXJyZW50Tm9kZSIsImRpdiIsIm1haW5Ob2RlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNvbnNvbGUiLCJsb2ciLCJzZXRBdHRyaWJ1dGUiLCJqc29uIiwiZm9yRWFjaCIsInNlYyIsInNlY3Rpb25Nb2RlbCIsIlNlY3Rpb24iLCJuZXh0U2xpZGUiLCJtb3ZlU2VjdGlvbiIsInB1c2giLCJhbGVydCIsImNsZWFyIiwiYnVpbGQiLCJkZWxCdG4iLCJCdWlsZGVyIiwiY3JlYXRlRWxlbWVudCIsImlubmVyVGV4dCIsIm9uY2xpY2siLCJldiIsInJlbW92ZUNoaWxkIiwibm9kZSIsImZpbHRlciIsImVsIiwiaWQiLCJhcHBlbmRDaGlsZCIsImFkZEJ1dHRvbiIsImJ0biIsInRhcmdldCIsInN3aXRjaEJ1dHRvbiIsInJ1biIsInNhdmVCdXR0b24iLCJjb21waWxlSnNvbiIsImRpc3BsYXkiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwidHlwZSIsImRhdGFzZXRzIiwibGFiZWwiLCJ4IiwieSIsImlubmVySFRNTCIsImxlbmd0aCIsInNob3ciLCJhcnIiLCJmaW5hbE91dHB1dCIsIkpTT04iLCJzdHJpbmdpZnkiLCJoaWRlIiwiX3BhcmVudCIsIl9qc29uIiwiX2NhbGxiYWNrIiwicGFyZW50IiwiYmxvY2tzIiwiY2FsbGJhY2siLCJ0aXRsZSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsImIiLCJibG9ja01vZGVsIiwiQmxvY2siLCJibGsiLCJ0aXRsZU5vZGUiLCJoclRpdGxlIiwicHJldkJ1dHRvbiIsIm5leHRCdXR0b24iLCJpc0NvbXBsZXRlZCIsInN0eWxlIiwiYW5zd2VyIiwiQmxvY2tUeXBlIiwidGV4dCIsIm1pbiIsIm1heCIsInN0ZXAiLCJjaG9pY2VzIiwiUkFESU8iLCJDSEVDS0JPWCIsImNob2ljZUpzb24iLCJjaG9pY2UiLCJDaG9pY2UiLCJociIsImFkZEJ1aWxkZXJJbnB1dFRleHQiLCJ2YWwiLCJlbnVtQXJyYXkiLCJrZXlzIiwiYSIsIm1hdGNoIiwibWFwIiwiYWRkQnVpbGRlcklucHV0RHJvcGRvd24iLCJOdW1iZXIiLCJ0cmlnZ2VyU3ViRWxlbWVudEJsb2NrIiwiYmxrU3R5bGUiLCJTTElERVIiLCJub2RlU2xpZGVyIiwiQmxvY2tSYWRpbyIsIkJsb2NrQ2hlY2tib3giLCJGUkVFVEVYVCIsIkJsb2NrRnJlZXRleHQiLCJCbG9ja1NsaWRlciIsImVsZW0iLCJfcGFyYW1zIiwiY2xhc3NlcyIsImxhYiIsImlucHV0Iiwib25ibHVyIiwib3B0aW9ucyIsIm9uY2hhbmdlIiwiZWxlbWVudCIsIm9wdCIsInNldEF0dHJpYnV0ZXMiLCJibG9jayIsImhvbGRlciIsImZpZWxkIiwicGFyc2VGbG9hdCIsImlucHV0RGl2Iiwib3V0cHV0IiwiZiIsIl9kaXYiLCJjaGVja2VkQm94ZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaWRzIiwiSGVscGVycyIsIkJhckNoYXJ0IiwibG9nMiIsIkxOMiIsImxvZzEwIiwiTE4xMCIsImF2ZyIsInYiLCJpbmRleCIsInYyIiwiQXJyYXkiLCJpc0FycmF5IiwidXBwZXJNYXgiLCJsb3dlck1pbiIsIkluZmluaXR5IiwiaXNOYU4iLCJpc0Zpbml0ZSIsIm5pY2VOdW1iZXJzIiwicmFuZ2UiLCJyb3VuZCIsImV4cG9uZW50IiwiZmxvb3IiLCJmcmFjdGlvbiIsInBvdyIsImdldExpbmVhclRpY2tzIiwibWF4VGlja3MiLCJ0aWNrU3BhY2luZyIsImNlaWwiLCJnZXRGb250IiwidmFyaWFudCIsIndlaWdodCIsInNpemUiLCJmYW1pbHkiLCJqb2luIiwiZ2V0QXhpc1JhdGlvIiwiY3R4IiwibW91c2VMaXN0ZW5lcnMiLCJjdXJyZW50SGludCIsImZpbGxSZWdpb25zIiwiZm9udCIsImZvbnRXZWlnaHQiLCJmb250U2l6ZVRpdGxlIiwiZm9udFNpemVBeGVzIiwiZm9udFNpemVUaWNrcyIsImZvbnRTaXplTGFiZWxzIiwiZm9udERhdGFUYWdzIiwiZm9udFNpemVMZWdlbmQiLCJmb250U2l6ZUhpbnQiLCJwYWRkaW5nUGVyY2VudEJhcnMiLCJwYWRkaW5nUGVyY2VudFRpY2tzIiwicGFkZGluZ1BpeGVsc1ZlcnRpY2FsIiwicGFkZGluZ1BpeGVsc0hvcml6b250YWwiLCJwYWRkaW5nUGl4ZWxzVGlja3MiLCJtYXhXaWR0aEJhcnMiLCJmaWxsQ29sb3JCYWNrZ3JvdW5kIiwic3Ryb2tlQ29sb3JCYXJzIiwiZmlsbENvbG9yQmFycyIsInNjYWxlU3R5bGUiLCJiYXJTdHlsZSIsInN0YWNrZWRCYXJQYWRkaW5nIiwiZGVmYXVsdE1heFRpY2siLCJwaXhlbHNMZWdlbmRTcXVhcmUiLCJyYWRpdXNEb3QiLCJmaWxsQ29sb3JMZWdlbmQiLCJ0aWNrRm9ybWF0dGVyIiwidGlja0Zvcm1hdHRlck1lYXN1cmUiLCJmaWxsUmVnaW9uIiwiY29udGVudCIsImxhYmVsUG9zaXRpb25zIiwidXBkYXRlIiwiRXJyb3IiLCJsYWJlbHMiLCJfZGF0YV9zdGFuZGFyZF9kZXZpYXRpb24iLCJfZGF0YV9zdGFuZGFyZF9lcnJvciIsImlzQXJyIiwiaTMiLCJtZWFuIiwiYWNjIiwiaTIiLCJzcXJ0IiwicmVkcmF3Iiwic2V0VGltZW91dCIsIl9kcmF3IiwibW91c2Vtb3ZlIiwicmVzIiwiY2giLCJkcmF3SW5kZXgiLCJ3aWR0aCIsImhlaWdodCIsImNsZWFyUmVjdCIsInRyYW5zbGF0ZSIsInJlbWFpbmluZ1dpZHRoIiwicmVtYWluaW5nSGVpZ2h0Iiwic2F2ZSIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwicmVzdG9yZSIsInRvcFlQYWRkaW5nIiwidGV4dEFsaWduIiwiZmlsbFRleHQiLCJsZWZ0WFBhZGRpbmciLCJtYXhDaGFydFZhbHVlIiwibWluQ2hhcnRWYWx1ZSIsImxlZnRYRHJhd1lMYWJlbCIsInlBeGlzIiwiY21JbmRleCIsImRvQiIsInRlbXBTdW0iLCJpaTIiLCJpbmRleE9mIiwiZmxvYXRlciIsInNwbGl0IiwiYmFycyIsImNidiIsIm1heFlBeGlzVGlja1dpZHRoIiwibWVhc3VyZVRleHQiLCJsZWdlbmQiLCJtYXhMV2lkdGgiLCJsSW5kZXgiLCJiU1giLCJiU1kiLCJsZWdlbmRFbnRyaWVzUGVyTGluZSIsImxMUmVxSGVpZ2h0IiwiYm90dG9tWVBhZGRpbmciLCJzdHJva2VTdHlsZSIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImZpbGwiLCJsZWdMaW5lIiwibGVnQ29sIiwiY29sb3IiLCJib3hYIiwiYm94WSIsInhBeGlzIiwid2lkdGhQZXJCYXIiLCJ0b3BMYWJlbHMiLCJyZXFXaWR0aCIsImRhdGFUYWdzIiwiaW5kZXgyIiwiY29tcHV0ZWRCYXJQYWRkaW5nIiwid3doIiwibWF4VGV4dFdpZHRoIiwibWF4VGV4dFN0YWNrU2l6ZSIsInRMYWJlbCIsInhMYWJlbHNSb3RhdGVkIiwicm90YXRlIiwiUEkiLCJsYXN0TGFiZWxZIiwiY0xhYmVsIiwieVVwIiwicmVtVmFsIiwiYm91bmRYMSIsImJvdW5kWDIiLCJib3VuZFkxIiwiYm91bmRZMiIsInhTdGFydCIsInhFbmQiLCJ5U3RhcnQiLCJ5RW5kIiwidG9wTGFiZWwiLCJ0aWNrTWV0YSIsImFscGhhIiwidGlja3MiLCJ0aWNrSGVpZ2h0IiwiY0JhciIsInJlbmRlckJhclkiLCJsYXN0RGF0YSIsImZpbGxDb2xvckZvckluZGV4Iiwic3Ryb2tlQ29sb3JGb3JJbmRleCIsImZpbGxDb2xvciIsInN0cm9rZUNvbG9yIiwidklzQXJyIiwicmVuZGVyU3RhcnRYIiwicnVubmluZ1ZhbHVlIiwibGFzdEhlaWdodCIsInJlbmRlckJhckhlaWdodCIsInJlbmRlclVwVG9ZIiwiYWJzIiwidFNYIiwidFNZIiwidEVYIiwidEVZIiwidGFnVGV4dCIsImJhclBhZFAiLCJoaW50cyIsImhpbnQiLCJzeCIsInN5IiwiZXgiLCJleSIsIm1pblgiLCJtYXhYIiwibWluWSIsIm1heFkiLCJyZWN0IiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwib0ZTIiwiYmFyVG9vbHRpcHMiLCJyYngiLCJsRHUiLCJzRlMiLCJuTERhdGEiLCJyYnkiLCJ0TFgiLCJ0TFkiLCJhcmMiLCJwcmV2IiwibmV4dCIsImJhbGxzIiwiYmFsbCIsInJhZGl1cyIsInJlbmRlclVwVG9ZMiIsInJlbmRlckJhckVycm9yIiwid2lza2VyV2lkdGgiLCJ4XyIsImhSZWN0IiwiYm94V2lkdGgiLCJsaW5lSGVpZ2h0IiwiYm94SGVpZ2h0IiwiZHJhd1giLCJkcmF3WSIsImJveFdpZHRoUGFkZGluZyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVL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SUFBU0wsR0FBTXJCLElBQU1xQixHQUFNcEIsUUFBVSxFQWNuRSxJQVpJd0IsSUFESkgsSUFBWUssSUFDVzNJLElBQ3JCeUksR0FBUUosR0FBTXZCLEtBQU93QixHQUFXLElBRTlCSSxHQUFRRixHQUFZLEVBQUksRUFDMUJFLEdBQVFwUyxLQUFLOEYsS0FBS29NLEdBQVksR0FBSyxFQUMxQkUsR0FBUUYsR0FBWSxFQUFJdkksSUFDakN5SSxHQUFRekksRUFBU3VJLEdBQVksRUFBSSxHQUVuQzVMLEVBQUlzRCxVQUFVdUksR0FBT0MsR0FBUUYsR0FBWSxFQUFHRixHQUFVRSxJQUN0RDVMLEVBQUkwRixZQUNKMUYsRUFBSWlLLEtBQUs0QixHQUFPQyxHQUFRRixHQUFZLEVBQUdGLEdBQVVFLElBQ2pENUwsRUFBSTZGLFNBQ0N4SCxFQUFRLEVBQUdBLEVBQVFrTCxHQUFNM1EsU0FBVXlGLEVBQ3RDMkIsRUFBSWdFLFNBQVN1RixHQUFNbEwsR0FBUXdOLEdBbEJQLEVBa0JnQ0MsR0FBUUYsR0FBWSxFQUFJL08sRUFBUStELGFBQWV2QyxFQUFRc04sSUFFN0czTCxFQUFJNkQsVUFHTjdELEVBQUl1RCxVQUFVLEdBQUssSUFFbkJqTyxLQUFLMk0sZUFBaUJBLEdBR2pCbkUsRUEzdkJNLFFBOHZCZ0QsSUFBbkIxSyxFQUFPRCxRQUNqREMsRUFBT0QsUUFBVTJLLEVBRWpCckksT0FBT3FJLFNBQVdBIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiLi9kaXN0L1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMik7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIkxpYnJhcnlcIl0gPSByZXF1aXJlKFwiLSEvVXNlcnMvcGl4aXVtZGlnaXRhbC9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9idWlsZGVyLnRzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiTGlicmFyeVwiXSA9IHJlcXVpcmUoXCItIS9Vc2Vycy9waXhpdW1kaWdpdGFsL1dvcmtzcGFjZS9mb3JtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcyEuL21haW4udHNcIik7IiwiXG5pbXBvcnQge1NlY3Rpb259IGZyb20gJy4vc2VjdGlvbic7XG5pbXBvcnQge0J1aWxkZXJ9IGZyb20gJy4vYnVpbGRlcic7XG4vLyBpbXBvcnQgKiBhcyBkYXRhIGZyb20gJy4vZGF0YS5qc29uJztcblxuaW1wb3J0IENoYXJ0IGZyb20gJ2NoYXJ0anMnO1xuXG5pbXBvcnQge3NvcnRhYmxlfSBmcm9tICdodG1sNXNvcnRhYmxlJztcblxuY29uc3QgZGF0YSA9IHJlcXVpcmUoJy4vZGF0YS5qc29uJyk7XG4vLyBjb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcblxuZXhwb3J0IGNsYXNzIFBpeGl1bUZvcm0ge1xuICAgIGpzb246Rm9ybURhdGE7XG4gICAgZGl2OnN0cmluZztcbiAgICBzZWN0aW9uczpTZWN0aW9uW107XG4gICAgb3V0cHV0OiBzdHJpbmc7XG4gICAgbWFpbk5vZGU6IEhUTUxFbGVtZW50O1xuICAgIHRpdGxlTm9kZTogSFRNTEVsZW1lbnQ7XG4gICAgY3VycmVudE5vZGU6IG51bWJlcjtcbiAgICBtb2RlOnN0cmluZztcblxuXG4gICAgY29uc3RydWN0b3IocGFyYW1zOkZvcm1EYXRhKSB7XG4gICAgICAgIHRoaXMuc2VjdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IDA7XG5cbiAgICAgICAgaWYoIXBhcmFtc1tcImRpdlwiXSl7XG4gICAgICAgICAgICBhbGVydCgnRGl2IG5vdCBmb3VuZC4gQ2Fubm90IGRpc3BsYXkgdGhlIGZvcm0nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpdiA9IHBhcmFtc1tcImRpdlwiXTtcbiAgICAgICAgdGhpcy5tYWluTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZGl2KTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5tYWluTm9kZSk7XG4gICAgICAgIHRoaXMubWFpbk5vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJjb250YWluZXIgZm9ybS1jb250YWluZXJcIik7XG5cbiAgICAgICAgLy8gaWYoIXBhcmFtc1tcImZvcm1cIl0pe1xuICAgICAgICAvLyAgICAgYWxlcnQoJ0RpdiBub3QgZm91bmQuIENhbm5vdCBkaXNwbGF5IHRoZSBmb3JtJyk7XG4gICAgICAgIC8vICAgICByZXR1cm47XG4gICAgICAgIC8vIH1wYXJhbXNbXCJmb3JtXCJdXG4gICAgICAgIGlmKHBhcmFtc1tcImRhdGFcIl0pe1xuICAgICAgICAgICAgdGhpcy5qc29uID0gcGFyYW1zW1wiZGF0YVwiXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuanNvbiA9IGRhdGE7Ly9KU09OLnBhcnNlKCBkYXRhICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihwYXJhbXNbXCJtb2RlXCJdKXtcbiAgICAgICAgICAgIHRoaXMubW9kZSA9IHBhcmFtc1tcIm1vZGVcIl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1vZGUgPSAncnVuJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJVSUxEIHRoZSBzZWN0aW9uIHN1YiBlbGVtZW50IChubyBnZW5lcmF0ZWQgSFRNTCBhdCB0aGlzIHN0YWdlIHlldClcbiAgICAgICAgaWYodGhpcy5qc29uICYmIHRoaXMuanNvbltcInNlY3Rpb25zXCJdKXtcbiAgICAgICAgICAgIGxldCBzZWNzID0gdGhpcy5qc29uW1wic2VjdGlvbnNcIl07XG4gICAgICAgICAgICBzZWNzLmZvckVhY2goIChzZWMpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc2VjdGlvbk1vZGVsID0gbmV3IFNlY3Rpb24odGhpcy5tYWluTm9kZSwgc2VjLCAoIChuZXh0U2xpZGU6Ym9vbGVhbikgPT50aGlzLm1vdmVTZWN0aW9uKG5leHRTbGlkZSkgKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9ucy5wdXNoKHNlY3Rpb25Nb2RlbCk7XG4gICAgICAgICAgICB9KTsgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGFsZXJ0KFwiQ291bGQgbm90IGluaXQgdGhlIG1vZHVsZS5cIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmpzb24pO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBFbnRlciBCVUlMRCBNT0RFIGZvciB1c2VyIHRvIGVkaXQgdGhlIGZvcm1cbiAgICAgKi9cbiAgICBidWlsZCgpe1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgdGhpcy5zZWN0aW9ucy5mb3JFYWNoKCAoc2VjKSA9PiB7XG4gICAgICAgICAgICBzZWMuYnVpbGQodGhpcy5tYWluTm9kZSk7XG4gICAgICAgICAgICAvLyBSRU1PVkUgU0VDVElPTiBCVE5cbiAgICAgICAgICAgIGxldCBkZWxCdG4gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1wiY2xhc3NcIjpcInBpeGl1bS1idG5cIn0pO1xuICAgICAgICAgICAgZGVsQnRuLmlubmVyVGV4dCA9IFwiREVMRVRFXCI7ICBcbiAgICAgICAgICAgIGRlbEJ0bi5vbmNsaWNrID0gKGV2ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1haW5Ob2RlLnJlbW92ZUNoaWxkKHNlYy5ub2RlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25zID0gdGhpcy5zZWN0aW9ucy5maWx0ZXIoZnVuY3Rpb24oZWwpIHsgcmV0dXJuIGVsLmlkICE9IHNlYy5pZDsgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlYy5ub2RlLmFwcGVuZENoaWxkKGRlbEJ0bik7XG4gICAgICAgICAgICBcbiAgICAgICAgfSk7XG5cblxuICAgICAgICAvLyBBREQgU0VDVElPTiBCVE5cbiAgICAgICAgdmFyIGFkZEJ1dHRvbiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1wiY2xhc3NcIjpcInBpeGl1bS1idG5cIn0pOyAgXG4gICAgICAgIGFkZEJ1dHRvbi5pbm5lclRleHQgPSBcIkFkZCBTZWN0aW9uXCI7ICBcbiAgICAgICAgYWRkQnV0dG9uLm9uY2xpY2sgPSAoZXYpID0+IFxuICAgICAgICB7ICAgXG4gICAgICAgICAgICBsZXQgYnRuID0gPEhUTUxFbGVtZW50PmV2LnRhcmdldDtcbiAgICAgICAgICAgIGxldCBzZWMgPSBuZXcgU2VjdGlvbih0aGlzLm1haW5Ob2RlLCBudWxsLCAoIChuZXh0U2xpZGU6Ym9vbGVhbikgPT50aGlzLm1vdmVTZWN0aW9uKG5leHRTbGlkZSkgKSk7XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25zLnB1c2goc2VjKTtcbiAgICAgICAgICAgIHRoaXMubWFpbk5vZGUucmVtb3ZlQ2hpbGQoYnRuKTtcbiAgICAgICAgICAgIHRoaXMubWFpbk5vZGUucmVtb3ZlQ2hpbGQoc3dpdGNoQnV0dG9uKTtcbiAgICAgICAgICAgIHNlYy5idWlsZCh0aGlzLm1haW5Ob2RlKTtcbiAgICAgICAgICAgIHRoaXMubWFpbk5vZGUuYXBwZW5kQ2hpbGQoYnRuKTtcbiAgICAgICAgICAgIHRoaXMubWFpbk5vZGUuYXBwZW5kQ2hpbGQoc3dpdGNoQnV0dG9uKTtcbiAgICAgICAgfTsgIFxuICAgICAgICB0aGlzLm1haW5Ob2RlLmFwcGVuZENoaWxkKGFkZEJ1dHRvbik7XG5cbiAgICAgICAgLy8gQlVJTEQgVEhFIFNXSVRDSCBVSSBCVVRUT04gVE8gRE8gVE8gUlVOIE1PREUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgdmFyIHN3aXRjaEJ1dHRvbiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1wiY2xhc3NcIjpcInBpeGl1bS1idG5cIn0pOyAgXG4gICAgICAgIHN3aXRjaEJ1dHRvbi5pbm5lclRleHQgPSBcIkdPIFRPIFJVTlwiOyAgXG4gICAgICAgIHN3aXRjaEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gXG4gICAgICAgIHsgICBcbiAgICAgICAgICAgIHRoaXMucnVuKCk7XG4gICAgICAgIH07ICBcbiAgICAgICAgdGhpcy5tYWluTm9kZS5hcHBlbmRDaGlsZChzd2l0Y2hCdXR0b24pO1xuICAgICAgICAvLyB0aGlzLm5vZGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIH1cblxuXG5cblxuICAgIC8qKlxuICAgICAqIFJ1biBmb3IgdXNlciB0byBhbnN3ZXIgdGhlIHF1ZXN0aW9uc1xuICAgICAqL1xuICAgIHJ1bigpe1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgdGhpcy5zZWN0aW9ucy5mb3JFYWNoKCAoc2VjKSA9PiB7XG4gICAgICAgICAgICBzZWMucnVuKHRoaXMubWFpbk5vZGUpO1xuICAgICAgICB9KTsgXG5cblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0gREVCVUcgU0FWRSBCVVRUT04gLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgdmFyIHNhdmVCdXR0b24gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcImNsYXNzXCI6XCJwaXhpdW0tYnRuXCJ9KTsgIFxuICAgICAgICBzYXZlQnV0dG9uLmlubmVyVGV4dCA9IFwiU0FWRVwiOyAgXG4gICAgICAgIHNhdmVCdXR0b24ub25jbGljayA9ICgpID0+IFxuICAgICAgICB7ICAgXG4gICAgICAgICAgICB0aGlzLmNvbXBpbGVKc29uKCk7XG4gICAgICAgIH07ICBcbiAgICAgICAgdGhpcy5tYWluTm9kZS5hcHBlbmRDaGlsZChzYXZlQnV0dG9uKTtcblxuICAgICAgICBcblxuICAgICAgICAvLyBCVUlMRCBUSEUgU1dJVENIIFVJIEJVVFRPTiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB2YXIgc3dpdGNoQnV0dG9uID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XCJjbGFzc1wiOlwicGl4aXVtLWJ0blwifSk7ICBcbiAgICAgICAgc3dpdGNoQnV0dG9uLmlubmVyVGV4dCA9IFwiR08gVE8gQlVJTEQgTU9ERVwiOyAgXG4gICAgICAgIHN3aXRjaEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gXG4gICAgICAgIHsgICBcbiAgICAgICAgICAgIHRoaXMuYnVpbGQoKTtcbiAgICAgICAgfTsgIFxuICAgICAgICB0aGlzLm1haW5Ob2RlLmFwcGVuZENoaWxkKHN3aXRjaEJ1dHRvbik7XG5cbiAgICAgICAgLy8gICAgIHRoaXMubWFpbk5vZGUuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCJsaXN0XCI+PCEtLSBTb3J0YWJsZSAtLT5cbiAgICAgICAgLy8gICAgIDxkaXYgY2xhc3M9XCJpdGVtXCI+IEl0ZW0gMVxuICAgICAgICAvLyAgICAgICA8ZGl2IGNsYXNzPVwic3VibGlzdFwiPjwhLS0gTmVzdGVkIFNvcnRhYmxlOyBXcmFwcGluZyBjb250YWluZXIgbmVlZGVkIC0tPlxuICAgICAgICAvLyAgICAgICAgIDxkaXYgY2xhc3M9XCJzdWJpdGVtXCI+U3ViaXRlbSAxPC9kaXY+XG4gICAgICAgIC8vICAgICAgICAgPGRpdiBjbGFzcz1cInN1Yml0ZW1cIj5TdWJpdGVtIDI8L2Rpdj5cbiAgICAgICAgLy8gICAgICAgPC9kaXY+XG4gICAgICAgIC8vICAgICA8L2Rpdj5cbiAgICAgICAgLy8gICAgIDxkaXYgY2xhc3M9XCJpdGVtXCI+IEl0ZW0gMiA8L2Rpdj5cbiAgICAgICAgLy8gICA8L2Rpdj5gO1xuXG4gICAgICAgIC8vIGxldCB0ZW1wID0gc29ydGFibGUodGhpcy5tYWluTm9kZSwge1xuICAgICAgICAvLyAgICAgY29weTp0cnVlIC8vIGRlZmF1bHQgdG8gZmFsc2VcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vIHRoaXMubWFpbk5vZGUuYXBwZW5kQ2hpbGQodGVtcCk7XG5cbiAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgfVxuXG4gICAgcmVzdWx0KCl7XG4gICAgICAgIC8vIDxjYW52YXMgaWQ9XCJteUNoYXJ0XCIgd2lkdGg9XCI0MDBcIiBoZWlnaHQ9XCI0MDBcIj48L2NhbnZhXG4gICAgICAgIC8vIGxldCBjaGFydEhvbGRlciA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiLCB7XG4gICAgICAgIC8vICAgICBcImlkXCI6XCJjaGFydGRpdlwiLFxuICAgICAgICAvLyAgICAgXCJ3aWR0aFwiOiA0MDAsXG4gICAgICAgIC8vICAgICBcImhlaWdodFwiOiA0MDBcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgdGhpcy5tYWluTm9kZS5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG4gICAgICAgIDtcblxuICAgICAgICB2YXIgbXlMaW5lQ2hhcnQgPSBuZXcgQ2hhcnQoY2FudmFzLmdldENvbnRleHQoXCIyZFwiKSwge1xuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGRhdGFzZXRzOiBbe1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1Rlc3QgRGF0YXNldCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiAtMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiAxMFxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IDVcbiAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vb3B0aW9uczogb3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENsZWFyIEFMTCB0aGUgbm9kZXNcbiAgICAgKi9cbiAgICBjbGVhcigpe1xuICAgICAgICBpZih0aGlzLm1haW5Ob2RlKXtcbiAgICAgICAgICAgIHRoaXMubWFpbk5vZGUuaW5uZXJIVE1MID0gJyc7ICAvLyBjbGVhciBhbGwgdGhlIHN1YiBub2Rlc1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9ucy5mb3JFYWNoKCAoc2VjKSA9PiB7XG4gICAgICAgICAgICAgICAgc2VjLmNsZWFyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuXG5cbiAgICBkaXNwbGF5KCl7XG4gICAgICAgIC8vIHRoaXMub3V0cHV0ID0gXCJcIjtcbiAgICAgICAgLy8gdGhpcy5zZWN0aW9ucy5mb3JFYWNoKCAoc2VjdGlvbikgPT4ge1xuICAgICAgICAvLyAgICAgdGhpcy5vdXRwdXQgKz0gc2VjdGlvbi5kaXNwbGF5KCk7XG4gICAgICAgIC8vIH0pO1xuICAgICAgICAvLyB0aGlzLm1haW5Ob2RlLmlubmVySFRNTCA9IHRoaXMub3V0cHV0O1xuICAgICAgICBpZih0aGlzLmN1cnJlbnROb2RlPj0wICYmIHRoaXMuY3VycmVudE5vZGU8dGhpcy5zZWN0aW9ucy5sZW5ndGgpe1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuXG4gICAgY29tcGlsZUpzb24oKXtcbiAgICAgICAgbGV0IGFycjogYW55W107XG4gICAgICAgIGFyciA9IFtdO1xuICAgICAgICB0aGlzLnNlY3Rpb25zLmZvckVhY2goIChzZWM6U2VjdGlvbikgPT4ge1xuICAgICAgICAgICAgYXJyLnB1c2goc2VjLmNvbXBpbGVKc29uKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGZpbmFsT3V0cHV0ID0gSlNPTi5zdHJpbmdpZnkoIHtcInNlY3Rpb25zXCI6YXJyfSApO1xuICAgICAgICBjb25zb2xlLmxvZyh7XCJzZWN0aW9uc1wiOmFycn0pO1xuICAgICAgICByZXR1cm4gZmluYWxPdXRwdXQ7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBNb3ZlIHRoZSBzbGlkZXIgb3IgZGlzcGxheSB0byB0aGUgbmV4dCBzZWN0aW9uXG4gICAgICovXG4gICAgbW92ZVNlY3Rpb24obmV4dFNsaWRlOmJvb2xlYW4pe1xuICAgICAgICAvLyBpZiBtb3ZlIGZvcndhcmRcbiAgICAgICAgaWYobmV4dFNsaWRlKXtcbiAgICAgICAgICAgIC8vIG1ha2luZyBzdXJlIEkgYW0gYWxsb3dlZCB0byBtb3ZlIHRvIHRoZSBuZXh0IHNsaWRlIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgICAgICAgaWYodGhpcy5jdXJyZW50Tm9kZT49MCAmJiB0aGlzLmN1cnJlbnROb2RlPHRoaXMuc2VjdGlvbnMubGVuZ3RoLTEpe1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvbnNbdGhpcy5jdXJyZW50Tm9kZV0uaGlkZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUrKztcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25zW3RoaXMuY3VycmVudE5vZGVdLnNob3coKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiWW91IGFscmVhZHkgYXJlIG9uIHRoZSBuZXh0IHNsaWRlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIC8vIG1ha2luZyBzdXJlIEkgYW0gYWxsb3dlZCB0byBtb3ZlIHRvIHRoZSBuZXh0IHNsaWRlIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgICAgICAgaWYodGhpcy5jdXJyZW50Tm9kZT49MSAmJiB0aGlzLmN1cnJlbnROb2RlPHRoaXMuc2VjdGlvbnMubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25zW3RoaXMuY3VycmVudE5vZGVdLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnROb2RlLS07XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uc1t0aGlzLmN1cnJlbnROb2RlXS5zaG93KCk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBhbGVydChcIllvdSBhbHJlYWR5IGFyZSBvbiB0aGUgZmlyc3Qgc2xpZGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxufSIsIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiTGlicmFyeVwiXSA9IHJlcXVpcmUoXCItIS9Vc2Vycy9waXhpdW1kaWdpdGFsL1dvcmtzcGFjZS9mb3JtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcyEuL3NlY3Rpb24udHNcIik7IiwiaW1wb3J0IHtCbG9ja30gZnJvbSBcIi4vYmxvY2svYmxvY2tcIjtcbmltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4vYnVpbGRlclwiO1xuaW1wb3J0IHsgQmxvY2tGYWN0b3J5IH0gZnJvbSBcIi4vYmxvY2svYmxvY2tGYWN0b3J5XCI7XG5pbXBvcnQgeyBCbG9ja1NsaWRlciB9IGZyb20gXCIuL2Jsb2NrL2Jsb2NrU2xpZGVyXCI7XG5cbi8qKlxuICogU0VDVElPTiBjbGFzcyBjb250YWlucyBhIHBvdGVudGlhbCBsaXN0IG9mIHF1ZXN0aW9uIHRoYXQgaXMgZGlzcGxheWVkIG9uIHRoZSBzYW1lIHBhZ2UgXG4gKi9cbmV4cG9ydCBjbGFzcyBTZWN0aW9ue1xuICAgIGJsb2NrczpCbG9ja1tdOyAgICBcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIG91dHB1dDogc3RyaW5nO1xuXG4gICAgaWQ6c3RyaW5nO1xuICAgIHBhcmVudDogSFRNTEVsZW1lbnQ7XG4gICAgbm9kZTogSFRNTEVsZW1lbnQ7XG4gICAgY2FsbGJhY2s6IEZ1bmN0aW9uO1xuXG4gICAgY29uc3RydWN0b3IoX3BhcmVudDpIVE1MRWxlbWVudCwgX2pzb246Rm9ybURhdGEsIF9jYWxsYmFjazpGdW5jdGlvbil7XG4gICAgICAgIHRoaXMucGFyZW50ID0gX3BhcmVudDtcbiAgICAgICAgdGhpcy5ibG9ja3MgPSBbXTtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IF9jYWxsYmFjaztcbiAgICAgICAgdGhpcy50aXRsZSA9IFwiRGVmYXVsdCBOYW1lXCI7XG4gICAgICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNyk7XG5cbiAgICAgICAgaWYoX2pzb24pe1xuICAgICAgICAgICAgaWYoX2pzb25bXCJuYW1lXCJdKXtcbiAgICAgICAgICAgICAgICB0aGlzLnRpdGxlID0gX2pzb25bXCJuYW1lXCJdO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYoX2pzb25bXCJibG9ja3NcIl0pe1xuICAgICAgICAgICAgICAgIF9qc29uW1wiYmxvY2tzXCJdLmZvckVhY2goIChiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBibG9ja01vZGVsID0gbmV3IEJsb2NrKGIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJsb2Nrcy5wdXNoKGJsb2NrTW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICAvL2Jsb2NrTW9kZWwucnVuKHRoaXMubm9kZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIERpc3BsYXkgdGhlIGZvcm0gaW4gQlVJTERFUiBNT0RFIGZvciB0aGUgdXNlciB0byBlZGl0IHRoZSBmb3JtIGl0c2VsZlxuICAgICAqIEBwYXJhbSBub2RlIFxuICAgICAqL1xuICAgIGJ1aWxkKG5vZGUpe1xuICAgICAgICB0aGlzLm5vZGUgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInJvdyBwaXhpdW0tYm94XCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5ibG9ja3MuZm9yRWFjaCggKGI6QmxvY2spID0+IHtcbiAgICAgICAgICAgIGIuYnVpbGQodGhpcy5ub2RlKTtcbiAgICAgICAgICAgIGxldCBkZWxCdG4gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1wiY2xhc3NcIjpcInBpeGl1bS1idG5cIn0pO1xuICAgICAgICAgICAgZGVsQnRuLmlubmVyVGV4dCA9IFwiREVMRVRFXCI7ICBcbiAgICAgICAgICAgIGRlbEJ0bi5vbmNsaWNrID0gKGV2ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUucmVtb3ZlQ2hpbGQoYi5ub2RlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJsb2NrcyA9IHRoaXMuYmxvY2tzLmZpbHRlcihmdW5jdGlvbihlbCkgeyByZXR1cm4gZWwuaWQgIT0gYi5pZDsgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGIubm9kZS5hcHBlbmRDaGlsZChkZWxCdG4pO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIEJVSUxEIFRIRSBCVVRUT04uIFBSRVZJT1VTIEJVVFRPTiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB2YXIgYWRkQnV0dG9uID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7XCJjbGFzc1wiOlwicGl4aXVtLWJ0blwifSk7ICBcbiAgICAgICAgYWRkQnV0dG9uLmlubmVyVGV4dCA9IFwiK1wiOyAgXG4gICAgICAgIGFkZEJ1dHRvbi5vbmNsaWNrID0gKGV2KSA9PiBcbiAgICAgICAgeyAgIFxuICAgICAgICAgICAgbGV0IGJ0biA9IDxIVE1MRWxlbWVudD5ldi50YXJnZXQ7XG4gICAgICAgICAgICAvLyBhZGQgYSBuZXcgYmxvY2tcbiAgICAgICAgICAgIGxldCBibGsgPSBuZXcgQmxvY2sobnVsbCk7XG4gICAgICAgICAgICB0aGlzLmJsb2Nrcy5wdXNoKGJsayk7XG4gICAgICAgICAgICB0aGlzLm5vZGUucmVtb3ZlQ2hpbGQoYnRuKTtcbiAgICAgICAgICAgIGJsay5idWlsZCh0aGlzLm5vZGUpO1xuICAgICAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGJ0bik7XG4gICAgICAgIH07ICBcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGFkZEJ1dHRvbik7XG5cbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpO1xuICAgIH1cblxuXG5cbiAgICAvKipcbiAgICAgKiBSdW4gdGhlIGZvcm0gZm9yIHVzZXIgdG8gYW5zd2VyXG4gICAgICogQHBhcmFtIG5vZGUgXG4gICAgICovXG4gICAgcnVuKG5vZGUpe1xuXG4gICAgICAgIHRoaXMubm9kZSA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBcImNsYXNzXCI6IFwicm93IHBpeGl1bS1ib3hcIlxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpdGxlTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcbiAgICAgICAgdGl0bGVOb2RlLmlubmVySFRNTCA9IHRoaXMudGl0bGU7XG4gICAgICAgIGxldCBoclRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImhyXCIpO1xuICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQodGl0bGVOb2RlKTtcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGhyVGl0bGUpO1xuXG4gICAgICAgIHRoaXMuYmxvY2tzLmZvckVhY2goIChiKSA9PiB7XG4gICAgICAgICAgICBiLnJ1bih0aGlzLm5vZGUpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIEJVSUxEIFRIRSBCVVRUT04uIFBSRVZJT1VTIEJVVFRPTiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB2YXIgcHJldkJ1dHRvbiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywge1wiY2xhc3NcIjpcInBpeGl1bS1idG5cIn0pOyAgXG4gICAgICAgIHByZXZCdXR0b24uaW5uZXJUZXh0ID0gXCJQcmV2aW91c1wiOyAgXG4gICAgICAgIHByZXZCdXR0b24ub25jbGljayA9ICgpID0+IFxuICAgICAgICB7ICAgXG4gICAgICAgICAgICBpZih0aGlzLmNhbGxiYWNrKXtcbiAgICAgICAgICAgICAgICAvLyBUUlVFIEZPUiBORVhUIFNMSURFXG4gICAgICAgICAgICAgICAgLy8gRkFMU0UgRk9SIFBSRVYgU0xJREVcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTsgIFxuICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQocHJldkJ1dHRvbik7XG5cbiAgICAgICAgLy8gQlVJTEQgVEhFIEJVVFRPTi4gTkVYVCBCVVRUT04gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgdmFyIG5leHRCdXR0b24gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHtcImNsYXNzXCI6XCJwaXhpdW0tYnRuXCJ9KTsgIFxuICAgICAgICBuZXh0QnV0dG9uLmlubmVyVGV4dCA9IFwiTmV4dFwiOyAgXG4gICAgICAgIG5leHRCdXR0b24ub25jbGljayA9ICgpID0+IFxuICAgICAgICB7ICAgXG4gICAgICAgICAgICBpZih0aGlzLmlzQ29tcGxldGVkKCkpe1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuY2FsbGJhY2spe1xuICAgICAgICAgICAgICAgICAgICAvLyBUUlVFIEZPUiBORVhUIFNMSURFXG4gICAgICAgICAgICAgICAgICAgIC8vIEZBTFNFIEZPUiBQUkVWIFNMSURFXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgYWxlcnQoXCJGb3JtIGhhcyBub3QgYmVlbiBmdWxseSBjb21wbGV0ZWQgeWV0LiBQbGVhc2UgcHJvY2VlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTsgIFxuICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQobmV4dEJ1dHRvbik7XG5cbiAgICAgICAgdGhpcy5ub2RlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgICAgICBub2RlLmFwcGVuZENoaWxkKHRoaXMubm9kZSk7XG4gICAgfVxuXG5cbiAgICBjbGVhcigpe1xuICAgICAgICBpZih0aGlzLm5vZGUpe1xuICAgICAgICAgICAgdGhpcy5ub2RlLmlubmVySFRNTCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmxvY2tzLmZvckVhY2goIChibGspID0+IHtcbiAgICAgICAgICAgIGJsay5jbGVhcigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuXG4gICAgZ2V0Tm9kZSgpe1xuICAgICAgICBhbGVydCh0aGlzLm5vZGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIGN1cnJlbnQgc2VjdGlvblxuICAgICAqL1xuICAgIHNob3coKXtcbiAgICAgICAgdGhpcy5ub2RlLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSB0aGUgY3VycmVudCBzZWN0aW9uIG9uIHNjcmVlblxuICAgICAqL1xuICAgIGhpZGUoKXtcbiAgICAgICAgdGhpcy5ub2RlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIHRoZSBGT1JNIGhhcyBiZWVuIGZ1bGx5IGNvbXBsZXRlZCAtIEFsbCBibG9ja3MgaGF2ZSBhIHZhbGlkIGFuc3dlclxuICAgICAqL1xuICAgIGlzQ29tcGxldGVkKCl7XG4gICAgICAgIGxldCBpc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuYmxvY2tzLmZvckVhY2goIChibGs6QmxvY2spPT57XG4gICAgICAgICAgICBpZihibGsgJiYgIWJsay5hbnN3ZXIpe1xuICAgICAgICAgICAgICAgIGlzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaXNDb21wbGV0ZWQ7XG4gICAgfVxuXG5cbiAgICBjb21waWxlSnNvbigpe1xuICAgICAgICBsZXQgYXJyOmFueVtdO1xuICAgICAgICBhcnIgPSBbXTtcbiAgICAgICAgdGhpcy5ibG9ja3MuZm9yRWFjaCggKGJsazpCbG9jaykgPT4ge1xuICAgICAgICAgICAgYXJyLnB1c2goYmxrLmNvbXBpbGVKc29uKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcImJsb2Nrc1wiOmFycn07XG4gICAgfVxufSIsIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiTGlicmFyeVwiXSA9IHJlcXVpcmUoXCItIS9Vc2Vycy9waXhpdW1kaWdpdGFsL1dvcmtzcGFjZS9mb3JtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcyEuL2Jsb2NrLnRzXCIpOyIsImltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4uL2J1aWxkZXJcIjtcbmltcG9ydCB7Q2hvaWNlfSBmcm9tIFwiLi9jaG9pY2VcIjtcblxuaW1wb3J0IHtCbG9ja1NsaWRlcn0gZnJvbSBcIi4vYmxvY2tTbGlkZXJcIjtcbmltcG9ydCB7QmxvY2tGcmVldGV4dH0gZnJvbSBcIi4vYmxvY2tGcmVldGV4dFwiO1xuaW1wb3J0IHtCbG9ja1JhZGlvfSBmcm9tIFwiLi9ibG9ja1JhZGlvXCI7XG5pbXBvcnQgeyBCbG9ja0NoZWNrYm94IH0gZnJvbSBcIi4vYmxvY2tDaGVja2JveFwiO1xuXG5leHBvcnQgZW51bSBCbG9ja1R5cGUge1xuICAgIEZSRUVURVhUID0gMSxcbiAgICBSQURJTyA9IDIsXG4gICAgU0xJREVSID0gMyxcbiAgICBDSEVDS0JPWCA9IDRcbn1cblxuXG4vKipcbiAqIEEgQmxvY2sgaXMgYSBsaXN0IFxuICovXG5leHBvcnQgY2xhc3MgQmxvY2t7XG4gICAgdHlwZTpudW1iZXI7XG4gICAgdGV4dDpzdHJpbmc7XG4gICAgYW5zd2VyOmFueTtcbiAgICBuYW1lOnN0cmluZztcbiAgICBtaW46c3RyaW5nO1xuICAgIG1heDpzdHJpbmc7XG4gICAgc3RlcDpzdHJpbmc7XG4gICAgY2hvaWNlczpDaG9pY2VbXTtcblxuICAgIG91dHB1dDpzdHJpbmc7XG4gICAgaWQ6c3RyaW5nO1xuICAgIGpzb246YW55O1xuXG4gICAgbm9kZTogSFRNTEVsZW1lbnQ7XG5cbiAgICAvKlxuICAgIFwidGl0bGVcIjogXCJERUxFR0FUSU9OOiA8YnI+IDxicj4gSG93IHNraWxsZWQgZG8geW91IGZlZWwgdG9kYXkgYWJvdXQgeW91ciBhYmlsaXR5IHRvIGRlbGVnYXRlP1wiLFxuICAgIFwidHlwZVwiOiA0LFxuICAgIFwiZ3JvdXBcIjogMSxcbiAgICBcImxhYmVsXCI6IFxuICAgICovXG5cbiAgICBjb25zdHJ1Y3RvcihfanNvbjpGb3JtRGF0YSA9IG51bGwpe1xuICAgICAgICB0aGlzLmpzb24gPSBfanNvbjtcbiAgICAgICAgdGhpcy50ZXh0ID0gXCJcIjtcbiAgICAgICAgdGhpcy50eXBlID0gMTtcbiAgICAgICAgdGhpcy5taW4gPSBcIlwiO1xuICAgICAgICB0aGlzLm1heCA9IFwiXCI7XG4gICAgICAgIHRoaXMuc3RlcCA9IFwiXCI7XG4gICAgICAgIHRoaXMuYW5zd2VyID0gXCJcIjtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJcIjtcblxuICAgICAgICB0aGlzLmlkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpO1xuXG4gICAgICAgIGlmKF9qc29uKXtcbiAgICAgICAgICAgIGlmKF9qc29uW1widGl0bGVcIl0pe1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IF9qc29uW1widGl0bGVcIl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKF9qc29uW1widHlwZVwiXSl7XG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gX2pzb25bXCJ0eXBlXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFuc3dlciA9IFwiXCI7XG4gICAgICAgICAgICBpZihfanNvbltcImFuc3dlclwiXSl7XG4gICAgICAgICAgICAgICAgdGhpcy5hbnN3ZXIgPSBfanNvbltcImFuc3dlclwiXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoX2pzb25bXCJuYW1lXCJdKXtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBfanNvbltcIm5hbWVcIl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKF9qc29uW1wibWluXCJdKXtcbiAgICAgICAgICAgICAgICB0aGlzLm1pbiA9IF9qc29uW1wibWluXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoX2pzb25bXCJtYXhcIl0pe1xuICAgICAgICAgICAgICAgIHRoaXMubWF4ID0gX2pzb25bXCJtYXhcIl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihfanNvbltcInN0ZXBcIl0pe1xuICAgICAgICAgICAgICAgIHRoaXMuc3RlcCA9IF9qc29uW1wic3RlcFwiXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jaG9pY2VzID0gW107XG5cbiAgICAgICAgICAgIGlmKHRoaXMudHlwZSA9PT0gQmxvY2tUeXBlLlJBRElPIHx8IHRoaXMudHlwZSA9PT0gQmxvY2tUeXBlLkNIRUNLQk9YKXtcbiAgICAgICAgICAgICAgICAvLyBsb2FkIGFkZGl0aW9uYWwgZGF0YVxuICAgICAgICAgICAgICAgIGlmKF9qc29uW1wiY2hvaWNlc1wiXSl7XG4gICAgICAgICAgICAgICAgICAgIF9qc29uW1wiY2hvaWNlc1wiXS5mb3JFYWNoKGNob2ljZUpzb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNob2ljZSA9IG5ldyBDaG9pY2UoY2hvaWNlSnNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNob2ljZXMucHVzaChjaG9pY2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy90aGlzLmNob2ljZXMgPSBfanNvbltcImNob2ljZXNcIl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENsZWFyIGFuZCByZW1vdmUgYWxsIHRoZSBIVE1MIE5vZGVcbiAgICAgKi9cbiAgICBjbGVhcigpe1xuICAgICAgICBpZih0aGlzLm5vZGUpe1xuICAgICAgICAgICAgdGhpcy5ub2RlLmlubmVySFRNTCA9ICcnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdXNlZCB0byBidWlsZCB0aGUgZm9ybVxuICAgICAqL1xuICAgIGJ1aWxkKG5vZGUpe1xuICAgICAgICB0aGlzLm5vZGUgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiIDogXCJyb3cgcGl4aXVtLWJsb2NrLWJ1aWxkXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGhyID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaHJcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS1ociBjb2wtbWQtMTJcIlxuICAgICAgICB9KTtcblxuICAgICAgICBCdWlsZGVyLmFkZEJ1aWxkZXJJbnB1dFRleHQodGhpcy5ub2RlLCB0aGlzLmlkLCB0aGlzLnRleHQsIFwiVGV4dFwiLCAodmFsKSA9PiB7dGhpcy50ZXh0PXZhbDt9LCBcImNvbC1tZC00XCIgKTtcbiAgICAgICAgQnVpbGRlci5hZGRCdWlsZGVySW5wdXRUZXh0KHRoaXMubm9kZSwgdGhpcy5pZCwgdGhpcy5uYW1lLCBcIk5hbWVcIiwgKHZhbCkgPT4ge3RoaXMubmFtZT12YWw7fSwgXCJjb2wtbWQtNFwiICk7XG4gICAgICAgIGxldCBlbnVtQXJyYXkgPSBPYmplY3Qua2V5cyhCbG9ja1R5cGUpLmZpbHRlcihhPT5hLm1hdGNoKC9eXFxELykpLm1hcChuYW1lPT4oe25hbWUsIHZhbHVlOiBCbG9ja1R5cGVbbmFtZV0gYXMgbnVtYmVyfSkpO1xuICAgICAgICBCdWlsZGVyLmFkZEJ1aWxkZXJJbnB1dERyb3Bkb3duKHRoaXMubm9kZSwgdGhpcy5pZCwgdGhpcy50eXBlLCBcIlR5cGVcIiwgKHZhbCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50eXBlPU51bWJlcih2YWwpO1xuICAgICAgICAgICAgdGhpcy5hbnN3ZXI9Jyc7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJTdWJFbGVtZW50QmxvY2soKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9LCBlbnVtQXJyYXksIFwiY29sLW1kLTRcIiApO1xuXG4gICAgICAgIGxldCBibGtTdHlsZSA9IFwiXCI7XG4gICAgICAgIGlmKHRoaXMudHlwZSAhPT0gQmxvY2tUeXBlLlNMSURFUil7XG4gICAgICAgICAgICBibGtTdHlsZSA9IFwiZGlzcGxheTpub25lO1wiXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5vZGVTbGlkZXIgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJpZFwiOiBcInNsaWRlcl9ibG9ja19cIit0aGlzLmlkLFxuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInJvdyBjb2wtbWQtMTJcIixcbiAgICAgICAgICAgIFwic3R5bGVcIjogYmxrU3R5bGVcbiAgICAgICAgfSk7XG4gICAgICAgIEJ1aWxkZXIuYWRkQnVpbGRlcklucHV0VGV4dChub2RlU2xpZGVyLCB0aGlzLmlkLCB0aGlzLm1pbiwgXCJNaW5cIiwgKHZhbCkgPT4ge3RoaXMubWluPXZhbDt9LCBcImNvbC1tZC00XCIgKTtcbiAgICAgICAgQnVpbGRlci5hZGRCdWlsZGVySW5wdXRUZXh0KG5vZGVTbGlkZXIsIHRoaXMuaWQsIHRoaXMubWF4LCBcIk1heFwiLCAodmFsKSA9PiB7dGhpcy5tYXg9dmFsO30sIFwiY29sLW1kLTRcIiApO1xuICAgICAgICBCdWlsZGVyLmFkZEJ1aWxkZXJJbnB1dFRleHQobm9kZVNsaWRlciwgdGhpcy5pZCwgdGhpcy5zdGVwLCBcIlN0ZXBcIiwgKHZhbCkgPT4ge3RoaXMuc3RlcD12YWw7fSwgXCJjb2wtbWQtNFwiICk7XG4gICAgICAgIEJ1aWxkZXIuYWRkQnVpbGRlcklucHV0VGV4dCh0aGlzLm5vZGUsIHRoaXMuaWQsIHRoaXMuY2hvaWNlcywgXCJDaG9pY2VzXCIsICh2YWwpID0+IHt0aGlzLmNob2ljZXM9dmFsO30gKTtcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKG5vZGVTbGlkZXIpO1xuXG4gICAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChocik7XG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKTtcbiAgICB9XG5cbiAgICBcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gUnVuIHRoZSBmb3JtXG4gICAgICovXG4gICAgcnVuKG5vZGUpe1xuICAgICAgICAvLyBhbGVydChcIkNcIik7XG4gICAgICAgIGxldCB0aXRsZU5vZGUgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJwXCIpOy8vZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIHRpdGxlTm9kZS5pbm5lckhUTUwgPSB0aGlzLnRleHQ7XG4gICAgICAgIHRoaXMubm9kZSA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKHRpdGxlTm9kZSk7XG5cbiAgICAgICAgc3dpdGNoKHRoaXMudHlwZSl7XG4gICAgICAgICAgICBjYXNlIEJsb2NrVHlwZS5SQURJTzpcbiAgICAgICAgICAgICAgICBCbG9ja1JhZGlvLnJ1bih0aGlzLm5vZGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEJsb2NrVHlwZS5DSEVDS0JPWDpcbiAgICAgICAgICAgICAgICBCbG9ja0NoZWNrYm94LnJ1bih0aGlzLm5vZGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEJsb2NrVHlwZS5GUkVFVEVYVDpcbiAgICAgICAgICAgICAgICBCbG9ja0ZyZWV0ZXh0LnJ1bih0aGlzLm5vZGUsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlIEJsb2NrVHlwZS5TTElERVI6XG4gICAgICAgICAgICAgICAgLy8gYWxlcnQoXCJTTElERVJcIik7XG4gICAgICAgICAgICAgICAgQmxvY2tTbGlkZXIucnVuKHRoaXMubm9kZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IGhyID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaHJcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS1oclwiXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoaHIpO1xuXG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKTtcbiAgICB9XG5cblxuICAgIGRpc3BsYXkoKXtcbiAgICB9XG5cblxuXG4gICAgdHJpZ2dlclN1YkVsZW1lbnRCbG9jaygpe1xuICAgICAgICBsZXQgZWxlbSA9IG51bGw7XG4gICAgICAgIFxuICAgICAgICBpZihlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzbGlkZXJfYmxvY2tfXCIrdGhpcy5pZCkpe1xuICAgICAgICAgICAgaWYodGhpcy50eXBlID09PSBCbG9ja1R5cGUuU0xJREVSKXtcbiAgICAgICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBhbGVydChcIk5vZGUgbm90IGZvdW5kXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBjb21waWxlSnNvbigpe1xuICAgICAgICB0aGlzLmpzb24gPSB7XG4gICAgICAgICAgICBcInR5cGVcIjp0aGlzLnR5cGUsXG4gICAgICAgICAgICBcInRleHRcIjp0aGlzLnRleHQsXG4gICAgICAgICAgICBcImFuc3dlclwiOnRoaXMuYW5zd2VyLFxuICAgICAgICAgICAgXCJuYW1lXCI6dGhpcy5uYW1lLFxuICAgICAgICAgICAgXCJtaW5cIjp0aGlzLm1pbixcbiAgICAgICAgICAgIFwibWF4XCI6dGhpcy5tYXgsXG4gICAgICAgICAgICBcInN0ZXBcIjp0aGlzLnN0ZXBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gdGhpcy5qc29uO1xuICAgIH1cbn0iLCJcbmV4cG9ydCBjbGFzcyBCdWlsZGVye1xuXG4gICAgLyoqXG4gICAgICogQnVpbGQgYW5kIHNldCBhbGwgdGhlIGF0dHJpYnV0ZSBvZiBhIEhUTUwgRWxlbWVudCBub2RlXG4gICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgdGhlIGlucHV0IHRvIGNyZWF0ZVxuICAgICAqIEBwYXJhbSBfcGFyYW1zIFRoZSBhdHRyaWJ1dGVzIGxpc3QgdG8gc2V0XG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUVsZW1lbnQodHlwZTpzdHJpbmcsIF9wYXJhbXM6YW55ID0gbnVsbCl7XG4gICAgICAgIGlmKCF0eXBlKXtcbiAgICAgICAgICAgIGFsZXJ0KFwiQ291bGQgbm90IGJ1aWxkIHRoZSBlbGVtZW50XCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICAgICAgICBpZihfcGFyYW1zKXtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBfcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gX3BhcmFtc1trZXldO1xuICAgICAgICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHdpbGwgc2V0IGFsbCBhdHRyaWJ1dGUgaW50byBhIHNwZWNpZmljIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gZWxlbSBFbGVtZW50IHRvIHNldCB0ZSBhdHRyaWJ1dGUgb2ZcbiAgICAgKiBAcGFyYW0gX3BhcmFtcyBUaGUgYXR0cmlidXRlcyBsaXN0IHRvIHNldFxuICAgICAqL1xuICAgIHN0YXRpYyBzZXRBdHRyaWJ1dGVzKGVsZW06SFRNTEVsZW1lbnQsIF9wYXJhbXM6YW55ID0gbnVsbCl7XG4gICAgICAgIGlmKF9wYXJhbXMpe1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIF9wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBfcGFyYW1zW2tleV07XG4gICAgICAgICAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHN0YXRpYyBhZGRCdWlsZGVySW5wdXRUZXh0KG5vZGUsIGlkLCB2YWx1ZSwgbGFiZWwsIGNhbGxiYWNrLCBjbGFzc2VzPVwiY29sLW1kLTEyXCIpe1xuICAgICAgICBsZXQgZGl2ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwaXhpdW0tcm93LWJsb2NrIFwiK2NsYXNzZXNcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBsYWIgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgbGFiLmlubmVySFRNTCA9IGxhYmVsK1wiOiBcIjtcbiAgICAgICAgbGV0IGlucHV0ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS10ZXh0Ym94XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IHZhbHVlLFxuICAgICAgICAgICAgXCJuYW1lXCI6IGxhYmVsK1wiX1wiK2lkLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcImNvbG9yOlJlZFwiXG4gICAgICAgIH0pO1xuICAgICAgICBpbnB1dC5vbmJsdXIgPSAoZXYpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2LnRhcmdldCk7XG4gICAgICAgICAgICBjYWxsYmFjaygoPEhUTUxJbnB1dEVsZW1lbnQ+ZXYudGFyZ2V0KS52YWx1ZSk7XG4gICAgICAgIH07IFxuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQobGFiKTtcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChkaXYpO1xuICAgIH1cblxuXG4gICAgLypcbjxzZWxlY3QgbmFtZT1cImNhcnNcIiBpZD1cImNhcnNcIj5cbiAgPG9wdGlvbiB2YWx1ZT1cInZvbHZvXCI+Vm9sdm88L29wdGlvbj5cbiAgPG9wdGlvbiB2YWx1ZT1cInNhYWJcIj5TYWFiPC9vcHRpb24+XG4gIDxvcHRpb24gdmFsdWU9XCJtZXJjZWRlc1wiPk1lcmNlZGVzPC9vcHRpb24+XG4gIDxvcHRpb24gdmFsdWU9XCJhdWRpXCI+QXVkaTwvb3B0aW9uPlxuPC9zZWxlY3Q+XG4gICAgKi9cbiAgICBzdGF0aWMgYWRkQnVpbGRlcklucHV0RHJvcGRvd24obm9kZSwgaWQsIHZhbHVlLCBsYWJlbCwgY2FsbGJhY2ssIG9wdGlvbnMsIGNsYXNzZXM9XCJjb2wtbWQtMTJcIil7XG4gICAgICAgIGxldCBkaXYgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS1yb3ctYmxvY2sgXCIrY2xhc3Nlc1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGxhYiA9IEJ1aWxkZXIuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICBsYWIuaW5uZXJIVE1MID0gbGFiZWwrXCI6IFwiO1xuICAgICAgICBsZXQgaW5wdXQgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS1kcm9wZG93blwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiB2YWx1ZSxcbiAgICAgICAgICAgIFwibmFtZVwiOiBsYWJlbCtcIl9cIitpZCxcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJkaXNwbGF5OmJsb2NrXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGlucHV0Lm9uY2hhbmdlID0gKGV2KSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjaygoPEhUTUxJbnB1dEVsZW1lbnQ+ZXYudGFyZ2V0KS52YWx1ZSk7XG4gICAgICAgIH07IFxuXG4gICAgICAgIG9wdGlvbnMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGxldCBvcHQgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIiwge1xuICAgICAgICAgICAgICAgIFwidmFsdWVcIjogZWxlbWVudC52YWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYodmFsdWU9PT1lbGVtZW50LnZhbHVlKXtcbiAgICAgICAgICAgICAgICBCdWlsZGVyLnNldEF0dHJpYnV0ZXMob3B0LCB7XG4gICAgICAgICAgICAgICAgICAgIFwic2VsZWN0ZWRcIjpcInNlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0LmlubmVySFRNTCA9IGVsZW1lbnQubmFtZTtcbiAgICAgICAgICAgIGlucHV0LmFwcGVuZENoaWxkKG9wdCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRpdi5hcHBlbmRDaGlsZChsYWIpO1xuICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICBub2RlLmFwcGVuZENoaWxkKGRpdik7XG4gICAgfVxufSIsIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiTGlicmFyeVwiXSA9IHJlcXVpcmUoXCItIS9Vc2Vycy9waXhpdW1kaWdpdGFsL1dvcmtzcGFjZS9mb3JtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcyEuL2Nob2ljZS50c1wiKTsiLCJcblxuZXhwb3J0IGNsYXNzIENob2ljZXtcbiAgICB0ZXh0OnN0cmluZztcbiAgICBsYWJlbDpzdHJpbmc7XG4gICAgdmFsdWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKF9qc29uKXtcbiAgICAgICAgaWYoX2pzb24pe1xuICAgICAgICAgICAgaWYoX2pzb25bXCJ0ZXh0XCJdKXtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBfanNvbltcInRleHRcIl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKF9qc29uW1wibGFiZWxcIl0pe1xuICAgICAgICAgICAgICAgIHRoaXMubGFiZWwgPSBfanNvbltcImxhYmVsXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihfanNvbltcInZhbHVlXCJdKXtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gX2pzb25bXCJ2YWx1ZVwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gYnVpbGQgdGhlIGZvcm1cbiAgICAgKi9cbiAgICBidWlsZChub2RlKXtcbiAgICAgICAgXG4gICAgfVxufSIsIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiTGlicmFyeVwiXSA9IHJlcXVpcmUoXCItIS9Vc2Vycy9waXhpdW1kaWdpdGFsL1dvcmtzcGFjZS9mb3JtLWJ1aWxkZXIvbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcyEuL2Jsb2NrU2xpZGVyLnRzXCIpOyIsImltcG9ydCB7QmxvY2t9IGZyb20gXCIuL2Jsb2NrXCI7XG5pbXBvcnQge0J1aWxkZXJ9IGZyb20gXCIuLi9idWlsZGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBCbG9ja1NsaWRlcntcblxuICAgIHN0YXRpYyBydW4obm9kZSwgYmxvY2s6QmxvY2spe1xuICAgICAgICBsZXQgaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaG9sZGVyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZWxlbWVudC1mb3JtLWNvbnRhaW5lclwiKTtcbiAgICAgICAgbGV0IGZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXG4gICAgICAgIGxldCBtaW4gPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjpcIl9sZWZ0XCJcbiAgICAgICAgfSk7XG4gICAgICAgIG1pbi5pbm5lckhUTUwgPSBibG9jay5taW47XG4gICAgICAgIGxldCBtYXggPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjpcIl9yaWdodFwiXG4gICAgICAgIH0pOztcbiAgICAgICAgbWF4LmlubmVySFRNTCA9IGJsb2NrLm1heDtcblxuICAgICAgICAvLyA8b3V0cHV0IGZvcj1cImZvb1wiIG9uZm9ybWlucHV0PVwidmFsdWUgPSBmb28udmFsdWVBc051bWJlcjtcIj48L291dHB1dD5cblxuICAgICAgICAvL0Fzc2lnbiBkaWZmZXJlbnQgYXR0cmlidXRlcyB0byB0aGUgZWxlbWVudC4gXG4gICAgICAgIEJ1aWxkZXIuc2V0QXR0cmlidXRlcyhmaWVsZCwge1xuICAgICAgICAgICAgXCJjbGFzc1wiOiBcInBpeGl1bS1zbGlkZXJcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInJhbmdlXCIsXG4gICAgICAgICAgICBcInZhbHVlXCI6IGJsb2NrLmFuc3dlcixcbiAgICAgICAgICAgIFwibWluXCI6IGJsb2NrLm1pbixcbiAgICAgICAgICAgIFwibWF4XCI6IGJsb2NrLm1heCxcbiAgICAgICAgICAgIFwibmFtZVwiOiBibG9jay5uYW1lLFxuICAgICAgICAgICAgXCJpZFwiOiBcImlucHV0cmFuZ2VfXCIrYmxvY2submFtZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYoYmxvY2suc3RlcCl7XG4gICAgICAgICAgICBmaWVsZC5zZXRBdHRyaWJ1dGUoXCJzdGVwXCIsIGJsb2NrLnN0ZXApO1xuICAgICAgICB9XG4gICAgICAgIGZpZWxkLm9uY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgYmxvY2suYW5zd2VyID0gcGFyc2VGbG9hdCgoPEhUTUxJbnB1dEVsZW1lbnQ+ZmllbGQpLnZhbHVlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCg8SFRNTElucHV0RWxlbWVudD5maWVsZCkpO1xuICAgICAgICAgICAgbGV0IHRlbXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm91dHB1dF9cIitibG9jay5uYW1lKS5pbm5lckhUTUwgPSBibG9jay5hbnN3ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaW5wdXREaXYgPSBCdWlsZGVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIC8vZm9ybS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsIFwib3V0cHV0X1wiK3RoaXMubmFtZStcIi5pbm5lckhUTUwgPSBcIit0aGlzLm5hbWUrXCIudmFsdWVcIiApO1xuICAgICAgICBsZXQgb3V0cHV0ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwib3V0cHV0XCIsIHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJvdXRwdXRfXCIrYmxvY2submFtZVxuICAgICAgICB9KTtcbiAgICAgICAgb3V0cHV0LmlubmVySFRNTCA9IGJsb2NrLmFuc3dlcjtcbiAgICAgICAgXG4gICAgICAgIGlucHV0RGl2LmFwcGVuZENoaWxkKG1pbik7XG4gICAgICAgIGlucHV0RGl2LmFwcGVuZENoaWxkKGZpZWxkKTtcbiAgICAgICAgaW5wdXREaXYuYXBwZW5kQ2hpbGQobWF4KTsgXG4gICAgICAgIGlucHV0RGl2LmFwcGVuZENoaWxkKG91dHB1dCk7XG4gICAgICAgIGhvbGRlci5hcHBlbmRDaGlsZChpbnB1dERpdik7XG5cbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChob2xkZXIpO1xuICAgIH1cbn0iLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIkxpYnJhcnlcIl0gPSByZXF1aXJlKFwiLSEvVXNlcnMvcGl4aXVtZGlnaXRhbC9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9ibG9ja0ZyZWV0ZXh0LnRzXCIpOyIsImltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4uL2J1aWxkZXJcIjtcblxuZXhwb3J0IGNsYXNzIEJsb2NrRnJlZXRleHR7XG5cbiAgICBzdGF0aWMgcnVuKG5vZGUsIGJsb2NrKXtcbiAgICAgICAgXG4gICAgICAgIGxldCBob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBob2xkZXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJlbGVtZW50LWZvcm0tY29udGFpbmVyXCIpO1xuICAgICAgICBsZXQgZmllbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cbiAgICAgICAgLy9Bc3NpZ24gZGlmZmVyZW50IGF0dHJpYnV0ZXMgdG8gdGhlIGVsZW1lbnQuIFxuICAgICAgICBCdWlsZGVyLnNldEF0dHJpYnV0ZXMoZmllbGQsIHtcbiAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwaXhpdW0tdGV4dGJveFwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwiLFxuICAgICAgICAgICAgXCJ2YWx1ZVwiOiBibG9jay5hbnN3ZXIsXG4gICAgICAgICAgICBcIm5hbWVcIjogdGhpcy5uYW1lLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcImNvbG9yOlJlZFwiXG4gICAgICAgIH0pOyBcbiAgICAgICAgZmllbGQub25ibHVyID0gKCkgPT4ge1xuICAgICAgICAgICAgYmxvY2suYW5zd2VyID0gKDxIVE1MSW5wdXRFbGVtZW50PmZpZWxkKS52YWx1ZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGJsb2NrLmFuc3dlcik7XG4gICAgICAgIH07IFxuICAgICAgICBob2xkZXIuYXBwZW5kQ2hpbGQoZmllbGQpOyBcbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChob2xkZXIpO1xuICAgIH1cbn0iLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIkxpYnJhcnlcIl0gPSByZXF1aXJlKFwiLSEvVXNlcnMvcGl4aXVtZGlnaXRhbC9Xb3Jrc3BhY2UvZm9ybS1idWlsZGVyL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanMhLi9ibG9ja1JhZGlvLnRzXCIpOyIsImltcG9ydCB7QnVpbGRlcn0gZnJvbSBcIi4uL2J1aWxkZXJcIjtcblxuZXhwb3J0IGNsYXNzIEJsb2NrUmFkaW8ge1xuXG4gICAgc3RhdGljIHJ1bihub2RlLCBibG9jayl7XG4gICAgICAgIGxldCBob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBob2xkZXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJlbGVtZW50LWZvcm0tY29udGFpbmVyXCIpO1xuXG4gICAgICAgIGJsb2NrLmNob2ljZXMuZm9yRWFjaCggKGNob2ljZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGYgID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInJhZGlvXCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6ICBibG9jay5uYW1lLFxuICAgICAgICAgICAgICAgIFwidmFsdWVcIjogIGNob2ljZS52YWx1ZStcIlwiXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGxhYmVsID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSBjaG9pY2UubGFiZWw7XG5cbiAgICAgICAgICAgIGxldCBfZGl2ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgX2Rpdi5hcHBlbmRDaGlsZChmKTtcbiAgICAgICAgICAgIF9kaXYuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgICAgICAgaG9sZGVyLmFwcGVuZENoaWxkKF9kaXYpO1xuXG4gICAgICAgICAgICBmLm9uY2xpY2sgPSAoZXYpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhldi50YXJnZXQpO1xuICAgICAgICAgICAgICAgIGJsb2NrLmFuc3dlciA9ICg8SFRNTElucHV0RWxlbWVudD5ldi50YXJnZXQpLnZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGJsb2NrLmFuc3dlcik7XG4gICAgICAgICAgICB9OyBcbiAgICAgICAgfSk7XG4gICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoaG9sZGVyKTtcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJMaWJyYXJ5XCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL3BpeGl1bWRpZ2l0YWwvV29ya3NwYWNlL2Zvcm0tYnVpbGRlci9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzIS4vYmxvY2tDaGVja2JveC50c1wiKTsiLCJpbXBvcnQge0J1aWxkZXJ9IGZyb20gXCIuLi9idWlsZGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBCbG9ja0NoZWNrYm94IHtcblxuICAgIHN0YXRpYyBydW4obm9kZSwgYmxvY2spe1xuICAgICAgICBsZXQgaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaG9sZGVyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZWxlbWVudC1mb3JtLWNvbnRhaW5lclwiKTtcblxuICAgICAgICBibG9jay5jaG9pY2VzLmZvckVhY2goIChjaG9pY2UpID0+IHtcblxuICAgICAgICAgICAgbGV0IGYgID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6ICBibG9jay5uYW1lLFxuICAgICAgICAgICAgICAgIFwidmFsdWVcIjogIGNob2ljZS52YWx1ZStcIlwiLFxuICAgICAgICAgICAgICAgIFwiaWRcIjogIGNob2ljZS52YWx1ZStcIlwiLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vUHJlc2VsZWN0IGFuc3dlcnMgaWYgc2V0XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrLmFuc3dlci5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgaWYoKGNob2ljZS52YWx1ZStcIlwiKT09PWJsb2NrLmFuc3dlcltpXSl7XG4gICAgICAgICAgICAgICAgICAgIEJ1aWxkZXIuc2V0QXR0cmlidXRlcyhmLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImNoZWNrZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgbGV0IGxhYmVsID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSBjaG9pY2UubGFiZWw7XG5cbiAgICAgICAgICAgIGxldCBfZGl2ID0gQnVpbGRlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgX2Rpdi5hcHBlbmRDaGlsZChmKTtcbiAgICAgICAgICAgIF9kaXYuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgICAgICAgaG9sZGVyLmFwcGVuZENoaWxkKF9kaXYpO1xuXG4gICAgICAgICAgICBmLm9uY2xpY2sgPSAoZXYpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZEJveGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1jaGVja2JveF1bbmFtZT1cIicrYmxvY2submFtZSsnXCJdOmNoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICBsZXQgaWRzID0gW107XG4gICAgICAgICAgICAgICAgY2hlY2tlZEJveGVzLmZvckVhY2goIChlbGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlkcy5wdXNoKCg8SFRNTElucHV0RWxlbWVudD5lbGVtKS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYmxvY2suYW5zd2VyID0gaWRzO1xuICAgICAgICAgICAgfTsgXG4gICAgICAgIH0pO1xuICAgICAgICBub2RlLmFwcGVuZENoaWxkKGhvbGRlcik7XG4gICAgfVxufSIsIi8qZ2xvYmFsIG1vZHVsZTp0cnVlKi9cbid1c2Ugc3RyaWN0JztcblxuTWF0aC5sb2cyID0gTWF0aC5sb2cyIHx8IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG59O1xuXG5NYXRoLmxvZzEwID0gTWF0aC5sb2cxMCB8fCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4xMDtcbn07XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIEhlbHBlcnMgPSB7XG4gICAgYXZnOiBmdW5jdGlvbihhcnIpIHtcbiAgICAgIHZhciB2ID0gMDtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBhcnIubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIHYgKz0gYXJyW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2IC8gYXJyLmxlbmd0aDtcbiAgICB9LFxuICAgIG1pbjogZnVuY3Rpb24oYXJyKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XG4gICAgICB2YXIgdiA9IGFyclswXTtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcnIubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIHZhciB2MiA9IGFycltpbmRleF07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHYyKSkgdjIgPSBIZWxwZXJzLmF2Zyh2Mik7XG4gICAgICAgIGlmICh2MiA8IHYpIHYgPSB2MjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBNYXRoLm1heCgwLCB2KTtcbiAgICB9LFxuICAgIG1heDogZnVuY3Rpb24oYXJyKSB7XG4gICAgICB2YXIgdiA9IDA7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgYXJyLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICB2YXIgdjIgPSBhcnJbaW5kZXhdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2MikpIHYyID0gSGVscGVycy5hdmcodjIpO1xuICAgICAgICBpZiAodjIgPiB2KSB2ID0gdjI7XG4gICAgICB9XG4gICAgICByZXR1cm4gTWF0aC5tYXgoMCwgdik7XG4gICAgfSxcbiAgICB1cHBlck1heDogZnVuY3Rpb24oYXJyKSB7XG4gICAgICB2YXIgdiA9IDA7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgYXJyLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICB2YXIgdjIgPSBhcnJbaW5kZXhdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2MikpIHYyID0gSGVscGVycy5tYXgodjIpO1xuICAgICAgICBpZiAodjIgPiB2KSB2ID0gdjI7XG4gICAgICB9XG4gICAgICByZXR1cm4gTWF0aC5tYXgoMCwgdik7XG4gICAgfSxcbiAgICBsb3dlck1pbjogZnVuY3Rpb24oYXJyKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XG4gICAgICB2YXIgdiA9IGFyclswXSB8fCBJbmZpbml0eTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHYpKSB2ID0gSGVscGVycy5sb3dlck1pbih2KTtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcnIubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIHZhciB2MiA9IGFycltpbmRleF07XG4gICAgICAgIGlmICh2MiA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodjIpKSB2MiA9IEhlbHBlcnMubG93ZXJNaW4odjIpO1xuICAgICAgICBpZiAodjIgPCB2KSB2ID0gdjI7XG4gICAgICB9XG4gICAgICBpZiAoaXNOYU4odikgfHwgIWlzRmluaXRlKHYpKSB2ID0gMDtcbiAgICAgIHJldHVybiBNYXRoLm1heCgwLCB2KTtcbiAgICB9LFxuICAgIG5pY2VOdW1iZXJzOiBmdW5jdGlvbihyYW5nZSwgcm91bmQpIHtcbiAgICAgIHZhciBleHBvbmVudCA9IE1hdGguZmxvb3IoTWF0aC5sb2cxMChyYW5nZSkpO1xuICAgICAgdmFyIGZyYWN0aW9uID0gcmFuZ2UgLyBNYXRoLnBvdygxMCwgZXhwb25lbnQpO1xuICAgICAgdmFyIG5pY2VGcmFjdGlvbjtcbiAgICAgIGlmIChyb3VuZCkge1xuICAgICAgICBpZiAoZnJhY3Rpb24gPCAxLjUpIG5pY2VGcmFjdGlvbiA9IDE7XG4gICAgICAgIGVsc2UgaWYgKGZyYWN0aW9uIDwgMykgbmljZUZyYWN0aW9uID0gMjtcbiAgICAgICAgZWxzZSBpZiAoZnJhY3Rpb24gPCA3KSBuaWNlRnJhY3Rpb24gPSA1O1xuICAgICAgICBlbHNlIG5pY2VGcmFjdGlvbiA9IDEwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZyYWN0aW9uIDw9IDEuMCkgbmljZUZyYWN0aW9uID0gMTtcbiAgICAgICAgZWxzZSBpZiAoZnJhY3Rpb24gPD0gMikgbmljZUZyYWN0aW9uID0gMjtcbiAgICAgICAgZWxzZSBpZiAoZnJhY3Rpb24gPD0gNSkgbmljZUZyYWN0aW9uID0gNTtcbiAgICAgICAgZWxzZSBuaWNlRnJhY3Rpb24gPSAxMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuaWNlRnJhY3Rpb24gKiBNYXRoLnBvdygxMCwgZXhwb25lbnQpO1xuICAgIH0sXG4gICAgZ2V0TGluZWFyVGlja3M6IGZ1bmN0aW9uKG1pbiwgbWF4LCBtYXhUaWNrcykge1xuICAgICAgdmFyIHJhbmdlID0gSGVscGVycy5uaWNlTnVtYmVycyhtYXggLSBtaW4sIGZhbHNlKTtcbiAgICAgIHZhciB0aWNrU3BhY2luZyA9IEhlbHBlcnMubmljZU51bWJlcnMocmFuZ2UgLyAobWF4VGlja3MgLSAxKSwgdHJ1ZSk7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBNYXRoLmZsb29yKG1pbiAvIHRpY2tTcGFjaW5nKSAqIHRpY2tTcGFjaW5nLFxuICAgICAgICBNYXRoLmNlaWwobWF4IC8gdGlja1NwYWNpbmcpICogdGlja1NwYWNpbmcsXG4gICAgICAgIHRpY2tTcGFjaW5nXG4gICAgICBdO1xuICAgIH0sXG4gICAgZ2V0Rm9udDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucy5zdHlsZSA9IG9wdGlvbnMuc3R5bGUgfHwgJ25vcm1hbCc7XG4gICAgICBvcHRpb25zLnZhcmlhbnQgPSBvcHRpb25zLnZhcmlhbnQgfHwgJ25vcm1hbCc7XG4gICAgICBvcHRpb25zLndlaWdodCA9IG9wdGlvbnMud2VpZ2h0IHx8ICdsaWdodGVyJztcbiAgICAgIG9wdGlvbnMuc2l6ZSA9IG9wdGlvbnMuc2l6ZSB8fCAnMTInO1xuICAgICAgb3B0aW9ucy5mYW1pbHkgPSBvcHRpb25zLmZhbWlseSB8fCAnQXJpYWwnO1xuICAgICAgcmV0dXJuIFtvcHRpb25zLnN0eWxlLCBvcHRpb25zLnZhcmlhbnQsIG9wdGlvbnMud2VpZ2h0LCBvcHRpb25zLnNpemUgKyAncHgnLCBvcHRpb25zLmZhbWlseV0uam9pbignICcpO1xuICAgIH0sXG4gICAgZ2V0QXhpc1JhdGlvOiBmdW5jdGlvbihtaW4sIG1heCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgLSBtaW4pIC8gKG1heCAtIG1pbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBCYXJDaGFydCA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBCYXJDaGFydChjdHgsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMubW91c2VMaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHRoaXMuY3VycmVudEhpbnQgPSBudWxsO1xuICAgICAgdGhpcy5maWxsUmVnaW9ucyA9IFtdXG4gICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgIGZvbnQ6ICdIZWx2ZXRpY2EnLFxuICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICAgICAgZm9udFNpemVUaXRsZTogMjQsXG4gICAgICAgIGZvbnRTaXplQXhlczogMjAsXG4gICAgICAgIGZvbnRTaXplVGlja3M6IDE4LFxuICAgICAgICBmb250U2l6ZUxhYmVsczogMTgsXG4gICAgICAgIGZvbnREYXRhVGFnczogMTgsXG4gICAgICAgIGZvbnRTaXplTGVnZW5kOiAxOCxcbiAgICAgICAgZm9udFNpemVIaW50OiAxOCxcbiAgICAgICAgcGFkZGluZ1BlcmNlbnRCYXJzOiAwLjEwLFxuICAgICAgICBwYWRkaW5nUGVyY2VudFRpY2tzOiAwLjE1LFxuICAgICAgICBwYWRkaW5nUGl4ZWxzVmVydGljYWw6IDEwLFxuICAgICAgICBwYWRkaW5nUGl4ZWxzSG9yaXpvbnRhbDogMTAsXG4gICAgICAgIHBhZGRpbmdQaXhlbHNUaWNrczogMTAsXG4gICAgICAgIG1heFdpZHRoQmFyczogMCxcbiAgICAgICAgZmlsbENvbG9yQmFja2dyb3VuZDogJ3JnYigyNTUsIDI1NSwgMjU1KScsXG4gICAgICAgIHN0cm9rZUNvbG9yQmFyczogJ3JnYigwLCAwLCAwKScsXG4gICAgICAgIGZpbGxDb2xvckJhcnM6ICdyZ2JhKDE4MCwgMTgwLCAxODAsIDAuMjUpJyxcbiAgICAgICAgc2NhbGVTdHlsZTogJ2xpbmVhcicsXG4gICAgICAgIGJhclN0eWxlOiAnbm9uZScsXG4gICAgICAgIHN0YWNrZWRCYXJQYWRkaW5nOiAzLFxuICAgICAgICBkZWZhdWx0TWF4VGljazogMCxcbiAgICAgICAgcGl4ZWxzTGVnZW5kU3F1YXJlOiAxMCxcbiAgICAgICAgcmFkaXVzRG90OiA1LFxuICAgICAgICBmaWxsQ29sb3JMZWdlbmQ6ICdyZ2IoMjMwLCAyMzAsIDIzMCknLFxuICAgICAgICB0aWNrRm9ybWF0dGVyOiBudWxsLFxuICAgICAgICB0aWNrRm9ybWF0dGVyTWVhc3VyZTogbnVsbCxcbiAgICAgICAgZmlsbFJlZ2lvbjogJ25vcm1hbCdcbiAgICAgIH07XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7IH07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5vcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpIHRoaXMub3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgfVxuICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICB0aGlzLmNvbnRlbnQgPSB7IH07XG4gICAgICB0aGlzLmxhYmVsUG9zaXRpb25zID0geyB9XG4gICAgfVxuXG4gICAgQmFyQ2hhcnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgY29udGVudCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb2xsZWN0aW9ucyBtdXN0IGJlIG9iamVjdHMuJyk7XG4gICAgICB9IGVsc2UgaWYgKCEoY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnbGFiZWxzJykgJiYgY29udGVudC5oYXNPd25Qcm9wZXJ0eSgnZGF0YScpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbGxlY3Rpb24gbXVzdCBzcGVjaWZ5IGxhYmVscyBhbmQgZGF0YS4nKTtcbiAgICAgIH0gZWxzZSBpZiAoIShBcnJheS5pc0FycmF5KGNvbnRlbnQubGFiZWxzKSAmJiBBcnJheS5pc0FycmF5KGNvbnRlbnQuZGF0YSkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTGFiZWxzIGFuZCBkYXRhIG11c3QgYmUgYXJyYXlzLicpO1xuICAgICAgfSBlbHNlIGlmIChjb250ZW50LmxhYmVscy5sZW5ndGggIT09IGNvbnRlbnQuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMYWJlbHMgYW5kIGRhdGEgbGVuZ3RoIG11c3QgbWF0Y2guJyk7XG4gICAgICB9XG4gICAgICBjb250ZW50Ll9kYXRhX3N0YW5kYXJkX2RldmlhdGlvbiA9IFtdO1xuICAgICAgY29udGVudC5fZGF0YV9zdGFuZGFyZF9lcnJvciA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZW50LmRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGlzQXJyID0gQXJyYXkuaXNBcnJheShjb250ZW50LmRhdGFbaV0pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNjYWxlU3R5bGUgPT09ICdsb2cyJykge1xuICAgICAgICAgIGlmIChpc0Fycikge1xuICAgICAgICAgICAgZm9yICh2YXIgaTMgPSAwOyBpMyA8IGNvbnRlbnQuZGF0YVtpXS5sZW5ndGg7ICsraTMpIGNvbnRlbnQuZGF0YVtpXVtpM10gPSBNYXRoLmxvZzIoY29udGVudC5kYXRhW2ldW2kzXSk7XG4gICAgICAgICAgfSBlbHNlIGNvbnRlbnQuZGF0YVtpXSA9IE1hdGgubG9nMihjb250ZW50LmRhdGFbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Fycikge1xuICAgICAgICAgIHZhciBtZWFuID0gSGVscGVycy5hdmcoY29udGVudC5kYXRhW2ldKTtcbiAgICAgICAgICB2YXIgYWNjID0gMDtcbiAgICAgICAgICBmb3IgKHZhciBpMiA9IDA7IGkyIDwgY29udGVudC5kYXRhW2ldLmxlbmd0aDsgKytpMikgYWNjICs9IE1hdGgucG93KG1lYW4gLSBjb250ZW50LmRhdGFbaV1baTJdLCAyKTtcbiAgICAgICAgICBhY2MgPSBNYXRoLnNxcnQoYWNjIC8gKGNvbnRlbnQuZGF0YVtpXS5sZW5ndGggLSAxKSk7XG4gICAgICAgICAgY29udGVudC5fZGF0YV9zdGFuZGFyZF9kZXZpYXRpb24ucHVzaChhY2MpO1xuICAgICAgICAgIGNvbnRlbnQuX2RhdGFfc3RhbmRhcmRfZXJyb3IucHVzaChhY2MgLyBNYXRoLnNxcnQoY29udGVudC5kYXRhW2ldLmxlbmd0aCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRlbnQuX2RhdGFfc3RhbmRhcmRfZGV2aWF0aW9uLnB1c2goMCk7XG4gICAgICAgICAgY29udGVudC5fZGF0YV9zdGFuZGFyZF9lcnJvci5wdXNoKDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9O1xuXG4gICAgQmFyQ2hhcnQucHJvdG90eXBlLnJlZHJhdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fZHJhdygpO1xuICAgICAgfS5iaW5kKHRoaXMpLCAwKTtcbiAgICB9O1xuXG4gICAgQmFyQ2hhcnQucHJvdG90eXBlLm1vdXNlbW92ZSA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciByZXMgPSBudWxsO1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMubW91c2VMaXN0ZW5lcnMubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIGlmICgocmVzID0gdGhpcy5tb3VzZUxpc3RlbmVyc1tpbmRleF0oeCwgeSkpKSBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICghcmVzIHx8ICh0eXBlb2YgcmVzKSAhPT0gJ29iamVjdCcgfHwgIXJlcy5oYXNPd25Qcm9wZXJ0eSgnaW5kZXgnKSB8fCAhcmVzLmhhc093blByb3BlcnR5KCdkcmF3SW5kZXgnKSkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50SGludCAhPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuY3VycmVudEhpbnQgPSBudWxsO1xuICAgICAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNoID0gdGhpcy5jdXJyZW50SGludDtcbiAgICAgIGlmIChjaCA9PSBudWxsIHx8IGNoLmluZGV4ICE9IHJlcy5pbmRleCB8fCBjaC5kcmF3SW5kZXggIT0gcmVzLmRyYXdJbmRleCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRIaW50ID0gcmVzO1xuICAgICAgICB0aGlzLnJlZHJhdygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBCYXJDaGFydC5wcm90b3R5cGUuX2RyYXcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsYWJlbFBvc2l0aW9ucyA9IHsgfVxuICAgICAgdGhpcy5tb3VzZUxpc3RlbmVycyA9IFtdO1xuICAgICAgdGhpcy5maWxsUmVnaW9ucyA9IFtdO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIHZhciBjdHggPSB0aGlzLmN0eCwgY29udGVudCA9IHRoaXMuY29udGVudDtcbiAgICAgIHZhciB3aWR0aCA9IGN0eC5jYW52YXMud2lkdGgsIGhlaWdodCA9IGN0eC5jYW52YXMuaGVpZ2h0O1xuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGN0eC50cmFuc2xhdGUoLTAuNSwgLTAuNSk7XG4gICAgICB2YXIgcmVtYWluaW5nV2lkdGggPSB3aWR0aCwgcmVtYWluaW5nSGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgdmFyIGluZGV4O1xuXG4gICAgICBpZiAob3B0aW9ucy5maWxsQ29sb3JCYWNrZ3JvdW5kICE9IG51bGwpIHtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuZmlsbENvbG9yQmFja2dyb3VuZDtcbiAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdG9wWVBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmdQaXhlbHNIb3Jpem9udGFsO1xuICAgICAgcmVtYWluaW5nSGVpZ2h0IC09IG9wdGlvbnMucGFkZGluZ1BpeGVsc0hvcml6b250YWw7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYigwLCAwLCAwKSc7XG4gICAgICAvKiBEcmF3IHRpdGxlIG9mIGJhciBjaGFydCAqL1xuICAgICAgaWYgKGNvbnRlbnQudGl0bGUgIT0gbnVsbCkge1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHguZm9udCA9IEhlbHBlcnMuZ2V0Rm9udCh7IHdlaWdodDogb3B0aW9ucy5mb250V2VpZ2h0LCBzaXplOiBvcHRpb25zLmZvbnRTaXplVGl0bGUsIGZhbWlseTogb3B0aW9ucy5mb250IH0pO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgIGN0eC5maWxsVGV4dChjb250ZW50LnRpdGxlLCB3aWR0aCAvIDIsIHRvcFlQYWRkaW5nICsgb3B0aW9ucy5mb250U2l6ZVRpdGxlKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgcmVtYWluaW5nSGVpZ2h0IC09IG9wdGlvbnMuZm9udFNpemVUaXRsZSAqIDEuMjU7XG4gICAgICAgIHRvcFlQYWRkaW5nICs9IG9wdGlvbnMuZm9udFNpemVUaXRsZSAqIDEuMjU7XG4gICAgICB9XG5cbiAgICAgIC8qIENvbXB1dGUgcmVxdWlyZWQgbGVmdCBwYWRkaW5nICovXG4gICAgICB2YXIgbGVmdFhQYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nUGl4ZWxzVmVydGljYWw7XG4gICAgICByZW1haW5pbmdXaWR0aCAgLT0gb3B0aW9ucy5wYWRkaW5nUGl4ZWxzVmVydGljYWw7XG5cbiAgICAgIHZhciBsZWZ0WERyYXdZTGFiZWwgPSBudWxsO1xuICAgICAgaWYgKGNvbnRlbnQueUF4aXMgIT0gbnVsbCkge1xuICAgICAgICBsZWZ0WERyYXdZTGFiZWwgPSBsZWZ0WFBhZGRpbmcgKyBvcHRpb25zLmZvbnRTaXplQXhlcyAqIDAuNTtcbiAgICAgICAgcmVtYWluaW5nV2lkdGggLT0gb3B0aW9ucy5mb250U2l6ZUF4ZXMgKiAxLjI1O1xuICAgICAgICBsZWZ0WFBhZGRpbmcgKz0gb3B0aW9ucy5mb250U2l6ZUF4ZXMgKiAxLjI1O1xuICAgICAgfVxuXG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LmZvbnQgPSBIZWxwZXJzLmdldEZvbnQoeyB3ZWlnaHQ6IG9wdGlvbnMuZm9udFdlaWdodCwgc2l6ZTogb3B0aW9ucy5mb250U2l6ZVRpY2tzLCBmYW1pbHk6IG9wdGlvbnMuZm9udCB9KTtcbiAgICAgIHZhciBtYXhDaGFydFZhbHVlLCBtaW5DaGFydFZhbHVlO1xuICAgICAgaWYgKG9wdGlvbnMuYmFyU3R5bGUgPT09ICdzdGFja2VkJykge1xuICAgICAgICBtYXhDaGFydFZhbHVlID0gMDtcbiAgICAgICAgbWluQ2hhcnRWYWx1ZSA9IEluZmluaXR5O1xuICAgICAgICBmb3IgKHZhciBjbUluZGV4ID0gMDsgY21JbmRleCA8IGNvbnRlbnQuZGF0YS5sZW5ndGg7ICsrY21JbmRleCkge1xuICAgICAgICAgIHZhciBkb0I7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZG9CID0gY29udGVudC5kYXRhW2NtSW5kZXhdKSkge1xuICAgICAgICAgICAgdmFyIHRlbXBTdW0gPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaWkyID0gMDsgaWkyIDwgZG9CLmxlbmd0aDsgKytpaTIpIHRlbXBTdW0gKz0gZG9CW2lpMl07XG4gICAgICAgICAgICBtYXhDaGFydFZhbHVlID0gTWF0aC5tYXgobWF4Q2hhcnRWYWx1ZSwgdGVtcFN1bSk7XG4gICAgICAgICAgICBtaW5DaGFydFZhbHVlID0gTWF0aC5taW4obWluQ2hhcnRWYWx1ZSwgdGVtcFN1bSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heENoYXJ0VmFsdWUgPSBNYXRoLm1heChtYXhDaGFydFZhbHVlLCBjb250ZW50LmRhdGFbY21JbmRleF0pO1xuICAgICAgICAgICAgbWluQ2hhcnRWYWx1ZSA9IE1hdGgubWluKG1pbkNoYXJ0VmFsdWUsIGNvbnRlbnQuZGF0YVtjbUluZGV4XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXhDaGFydFZhbHVlID0gSGVscGVycy51cHBlck1heChjb250ZW50LmRhdGEpO1xuICAgICAgICBtaW5DaGFydFZhbHVlID0gSGVscGVycy5sb3dlck1pbihjb250ZW50LmRhdGEpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuc2NhbGVTdHlsZS5pbmRleE9mKCdhZGFwdGl2ZScpID09PSAwKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnNjYWxlU3R5bGUuaW5kZXhPZignOicpICE9PSAtMSkge1xuICAgICAgICAgIHZhciBmbG9hdGVyID0gcGFyc2VGbG9hdChvcHRpb25zLnNjYWxlU3R5bGUuc3BsaXQoL1s6XS8pWzFdKTtcbiAgICAgICAgICBtaW5DaGFydFZhbHVlICo9IGZsb2F0ZXI7XG4gICAgICAgICAgbWF4Q2hhcnRWYWx1ZSAqPSAxICsgKDEgLSBmbG9hdGVyKSAvIDIuMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIG1pbkNoYXJ0VmFsdWUgPSAwO1xuICAgICAgaWYgKG9wdGlvbnMuZGVmYXVsdE1heFRpY2sgPiBtYXhDaGFydFZhbHVlKSBtYXhDaGFydFZhbHVlID0gb3B0aW9ucy5kZWZhdWx0TWF4VGljaztcbiAgICAgIGlmIChjb250ZW50LmJhcnMgIT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KGNvbnRlbnQuYmFycykpIHtcbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29udGVudC5iYXJzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICAgIHZhciBjYnYgPSBjb250ZW50LmJhcnNbaW5kZXhdLnZhbHVlO1xuICAgICAgICAgIGlmIChpc05hTihjYnYpKSBjb250aW51ZTtcbiAgICAgICAgICBtYXhDaGFydFZhbHVlID0gTWF0aC5tYXgobWF4Q2hhcnRWYWx1ZSwgY2J2KTtcbiAgICAgICAgICBtaW5DaGFydFZhbHVlID0gTWF0aC5taW4obWluQ2hhcnRWYWx1ZSwgY2J2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG1heFlBeGlzVGlja1dpZHRoID0gb3B0aW9ucy5zY2FsZVN0eWxlID09ICdsb2cyJyA/IE1hdGguY2VpbChNYXRoLnBvdygyLCBtYXhDaGFydFZhbHVlKSkgOiAoTWF0aC5jZWlsKG1heENoYXJ0VmFsdWUpICsgJy4wMCcpO1xuICAgICAgaWYgKG9wdGlvbnMudGlja0Zvcm1hdHRlck1lYXN1cmUgIT0gbnVsbCkgbWF4WUF4aXNUaWNrV2lkdGggPSBvcHRpb25zLnRpY2tGb3JtYXR0ZXJNZWFzdXJlO1xuICAgICAgbWF4WUF4aXNUaWNrV2lkdGggPSBjdHgubWVhc3VyZVRleHQobWF4WUF4aXNUaWNrV2lkdGgpLndpZHRoO1xuICAgICAgbWF4WUF4aXNUaWNrV2lkdGggPSBNYXRoLmNlaWwobWF4WUF4aXNUaWNrV2lkdGgpICsgb3B0aW9ucy5wYWRkaW5nUGl4ZWxzVGlja3M7XG4gICAgICByZW1haW5pbmdXaWR0aCAtPSBtYXhZQXhpc1RpY2tXaWR0aDtcbiAgICAgIGxlZnRYUGFkZGluZyArPSBtYXhZQXhpc1RpY2tXaWR0aDtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG5cbiAgICAgIHZhciByaWdodFhQYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nUGl4ZWxzVmVydGljYWw7XG4gICAgICByZW1haW5pbmdXaWR0aCAtPSBvcHRpb25zLnBhZGRpbmdQaXhlbHNWZXJ0aWNhbDtcblxuICAgICAgLyogRHJhdyBsZWdlbmQgKi9cbiAgICAgIGlmIChjb250ZW50LmxlZ2VuZCAhPSBudWxsICYmIEFycmF5LmlzQXJyYXkoY29udGVudC5sZWdlbmQpKSB7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5mb250ID0gSGVscGVycy5nZXRGb250KHsgd2VpZ2h0OiBvcHRpb25zLmZvbnRXZWlnaHQsIHNpemU6IG9wdGlvbnMuZm9udFNpemVMZWdlbmQsIGZhbWlseTogb3B0aW9ucy5mb250IH0pO1xuICAgICAgICB2YXIgbWF4TFdpZHRoID0gMDtcbiAgICAgICAgZm9yICh2YXIgbEluZGV4ID0gMDsgbEluZGV4IDwgY29udGVudC5sZWdlbmQubGVuZ3RoOyArK2xJbmRleCkge1xuICAgICAgICAgIG1heExXaWR0aCA9IE1hdGgubWF4KG1heExXaWR0aCwgY3R4Lm1lYXN1cmVUZXh0KGNvbnRlbnQubGVnZW5kW2xJbmRleF0ubGFiZWwpLndpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMV2lkdGggPSBNYXRoLmNlaWwobWF4TFdpZHRoKTtcbiAgICAgICAgbWF4TFdpZHRoICs9IG9wdGlvbnMucGl4ZWxzTGVnZW5kU3F1YXJlICsgODtcbiAgICAgICAgdmFyIGxlZ2VuZEVudHJpZXNQZXJMaW5lID0gTWF0aC5mbG9vcigocmVtYWluaW5nV2lkdGggLSBvcHRpb25zLnBhZGRpbmdQaXhlbHNIb3Jpem9udGFsICogMikgLyBtYXhMV2lkdGgpO1xuICAgICAgICB2YXIgbExSZXFIZWlnaHQgPSBNYXRoLmNlaWwoY29udGVudC5sZWdlbmQubGVuZ3RoIC8gbGVnZW5kRW50cmllc1BlckxpbmUpICogb3B0aW9ucy5mb250U2l6ZUxlZ2VuZCAqIDEuNTtcbiAgICAgICAgcmVtYWluaW5nSGVpZ2h0IC09IGxMUmVxSGVpZ2h0O1xuICAgICAgICBib3R0b21ZUGFkZGluZyArPSBsTFJlcUhlaWdodDtcblxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiKDAsIDAsIDApJztcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuZmlsbENvbG9yTGVnZW5kO1xuICAgICAgICB2YXIgYlNYLCBiU1k7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyhiU1ggPSBsZWZ0WFBhZGRpbmcsIGJTWSA9IHRvcFlQYWRkaW5nICsgcmVtYWluaW5nSGVpZ2h0KTtcbiAgICAgICAgY3R4LmxpbmVUbyhiU1ggKyByZW1haW5pbmdXaWR0aCwgYlNZKTtcbiAgICAgICAgY3R4LmxpbmVUbyhiU1ggKyByZW1haW5pbmdXaWR0aCwgYlNZICsgbExSZXFIZWlnaHQpO1xuICAgICAgICBjdHgubGluZVRvKGJTWCwgYlNZICsgbExSZXFIZWlnaHQpO1xuICAgICAgICBjdHgubGluZVRvKGJTWCwgYlNZKTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICBjdHguZmlsbCgpO1xuXG4gICAgICAgIGZvciAobEluZGV4ID0gMDsgbEluZGV4IDwgY29udGVudC5sZWdlbmQubGVuZ3RoOyArK2xJbmRleCkge1xuICAgICAgICAgIHZhciBsZWdMaW5lID0gTWF0aC5mbG9vcihsSW5kZXggLyBsZWdlbmRFbnRyaWVzUGVyTGluZSk7XG4gICAgICAgICAgdmFyIGxlZ0NvbCA9IGxJbmRleCAlIGxlZ2VuZEVudHJpZXNQZXJMaW5lO1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBjb250ZW50LmxlZ2VuZFtsSW5kZXhdLmNvbG9yO1xuICAgICAgICAgIHZhciBib3hYID0gYlNYICsgbGVnQ29sICogbWF4TFdpZHRoICsgMywgYm94WSA9IGJTWSArIGxlZ0xpbmUgKiBvcHRpb25zLmZvbnRTaXplTGVnZW5kICogMS41ICsgb3B0aW9ucy5mb250U2l6ZUxlZ2VuZCAqIDAuNTtcbiAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgY3R4Lm1vdmVUbyhib3hYLCBib3hZKTtcbiAgICAgICAgICBjdHgubGluZVRvKGJveFggKyBvcHRpb25zLnBpeGVsc0xlZ2VuZFNxdWFyZSwgYm94WSk7XG4gICAgICAgICAgY3R4LmxpbmVUbyhib3hYICsgb3B0aW9ucy5waXhlbHNMZWdlbmRTcXVhcmUsIGJveFkgKyBvcHRpb25zLnBpeGVsc0xlZ2VuZFNxdWFyZSk7XG4gICAgICAgICAgY3R4LmxpbmVUbyhib3hYLCBib3hZICsgb3B0aW9ucy5waXhlbHNMZWdlbmRTcXVhcmUpO1xuICAgICAgICAgIGN0eC5saW5lVG8oYm94WCwgYm94WSk7XG4gICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICAgICAgICBjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiKDAsIDAsIDApJztcbiAgICAgICAgICBjdHguZmlsbFRleHQoY29udGVudC5sZWdlbmRbbEluZGV4XS5sYWJlbCwgYm94WCArIDMgKyBvcHRpb25zLnBpeGVsc0xlZ2VuZFNxdWFyZSwgYm94WSArIG9wdGlvbnMuZm9udFNpemVMZWdlbmQgKiAwLjUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIH1cblxuICAgICAgLyogRHJhdyB4LWF4aXMgbGFiZWwgb2YgYmFyIGNoYXJ0ICovXG4gICAgICB2YXIgYm90dG9tWVBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmdQaXhlbHNIb3Jpem9udGFsO1xuICAgICAgcmVtYWluaW5nSGVpZ2h0IC09IG9wdGlvbnMucGFkZGluZ1BpeGVsc0hvcml6b250YWw7XG4gICAgICBpZiAoY29udGVudC54QXhpcyAhPSBudWxsKSB7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5mb250ID0gSGVscGVycy5nZXRGb250KHsgd2VpZ2h0OiBvcHRpb25zLmZvbnRXZWlnaHQsIHNpemU6IG9wdGlvbnMuZm9udFNpemVBeGVzLCBmYW1pbHk6IG9wdGlvbnMuZm9udCB9KTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2IoMCwgMCwgMCknO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgIGN0eC5maWxsVGV4dChjb250ZW50LnhBeGlzLCAod2lkdGggLSByZW1haW5pbmdXaWR0aCkgKyByZW1haW5pbmdXaWR0aCAvIDIsIHRvcFlQYWRkaW5nICsgcmVtYWluaW5nSGVpZ2h0IC0gYm90dG9tWVBhZGRpbmcpO1xuICAgICAgICByZW1haW5pbmdIZWlnaHQgLT0gb3B0aW9ucy5mb250U2l6ZUF4ZXMgKiAxLjU7XG4gICAgICAgIGJvdHRvbVlQYWRkaW5nICs9IG9wdGlvbnMuZm9udFNpemVBeGVzICogMS41O1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgd2lkdGhQZXJCYXIgPSByZW1haW5pbmdXaWR0aCAvIGNvbnRlbnQuZGF0YS5sZW5ndGg7XG5cbiAgICAgIC8qIERyYXcgeC1heGlzIHRvcCBsYWJlbHMgKi9cbiAgICAgIGlmIChjb250ZW50LnRvcExhYmVscyAhPSBudWxsKSB7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgY3R4LmZvbnQgPSBIZWxwZXJzLmdldEZvbnQoeyB3ZWlnaHQ6IG9wdGlvbnMuZm9udFdlaWdodCwgc2l6ZTogb3B0aW9ucy5mb250U2l6ZUxhYmVscywgZmFtaWx5OiBvcHRpb25zLmZvbnQgfSk7XG4gICAgICAgIHJlbWFpbmluZ0hlaWdodCAtPSBvcHRpb25zLmZvbnRTaXplTGFiZWxzICogMS41O1xuICAgICAgICB0b3BZUGFkZGluZyArPSBvcHRpb25zLmZvbnRTaXplTGFiZWxzICogMS41O1xuICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb250ZW50LnRvcExhYmVscy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICBjdHguZmlsbFRleHQoXG4gICAgICAgICAgICBjb250ZW50LnRvcExhYmVsc1tpbmRleF0sXG4gICAgICAgICAgICBsZWZ0WFBhZGRpbmcgKyBpbmRleCAqIHdpZHRoUGVyQmFyICsgd2lkdGhQZXJCYXIgLyAyLFxuICAgICAgICAgICAgdG9wWVBhZGRpbmcgLSBvcHRpb25zLmZvbnRTaXplTGFiZWxzIC8gMlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIH1cblxuICAgICAgLyogRHJhdyB4LWF4aXMgbGFiZWxzICovXG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgdmFyIHJlcVdpZHRoID0gMDtcbiAgICAgIGlmIChjb250ZW50LmRhdGFUYWdzICE9IG51bGwpIHtcbiAgICAgICAgY3R4LmZvbnQgPSBIZWxwZXJzLmdldEZvbnQoeyB3ZWlnaHQ6IG9wdGlvbnMuZm9udFdlaWdodCwgc2l6ZTogb3B0aW9ucy5mb250RGF0YVRhZ3MsIGZhbWlseTogb3B0aW9ucy5mb250IH0pO1xuICAgICAgICB2YXIgZGF0YVRhZ3MgPSBjb250ZW50LmRhdGFUYWdzO1xuICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBkYXRhVGFncy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhVGFnc1tpbmRleF0pKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleDIgPSAwOyBpbmRleDIgPCBkYXRhVGFnc1tpbmRleF0ubGVuZ3RoOyArK2luZGV4Mikge1xuICAgICAgICAgICAgICByZXFXaWR0aCA9IE1hdGgubWF4KHJlcVdpZHRoLCBNYXRoLmNlaWwoY3R4Lm1lYXN1cmVUZXh0KGRhdGFUYWdzW2luZGV4XVtpbmRleDJdKS53aWR0aCArIDUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVxV2lkdGggPSBNYXRoLm1heChyZXFXaWR0aCwgTWF0aC5jZWlsKGN0eC5tZWFzdXJlVGV4dChkYXRhVGFnc1tpbmRleF0pLndpZHRoICsgNSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjdHguZm9udCA9IEhlbHBlcnMuZ2V0Rm9udCh7IHdlaWdodDogb3B0aW9ucy5mb250V2VpZ2h0LCBzaXplOiBvcHRpb25zLmZvbnRTaXplTGFiZWxzLCBmYW1pbHk6IG9wdGlvbnMuZm9udCB9KTtcbiAgICAgIHZhciBjb21wdXRlZEJhclBhZGRpbmcgPSBNYXRoLmZsb29yKCh3aWR0aFBlckJhciAqIG9wdGlvbnMucGFkZGluZ1BlcmNlbnRCYXJzKSAvIDIpO1xuICAgICAgdmFyIHd3aCA9IHdpZHRoUGVyQmFyIC0gY29tcHV0ZWRCYXJQYWRkaW5nICogMjtcbiAgICAgIGlmICh3d2ggPCByZXFXaWR0aCkge1xuICAgICAgICBjb21wdXRlZEJhclBhZGRpbmcgLT0gTWF0aC5jZWlsKChyZXFXaWR0aCAtIHd3aCkgLyAyKTtcbiAgICAgICAgY29tcHV0ZWRCYXJQYWRkaW5nID0gTWF0aC5tYXgoMCwgY29tcHV0ZWRCYXJQYWRkaW5nKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5tYXhXaWR0aEJhcnMgPiAwICYmIHd3aCA+IG9wdGlvbnMubWF4V2lkdGhCYXJzKSB7XG4gICAgICAgIGNvbXB1dGVkQmFyUGFkZGluZyA9IE1hdGguZmxvb3IoKHdpZHRoUGVyQmFyIC0gb3B0aW9ucy5tYXhXaWR0aEJhcnMpIC8gMik7XG4gICAgICB9XG4gICAgICB2YXIgbWF4VGV4dFdpZHRoID0gMCwgbWF4VGV4dFN0YWNrU2l6ZSA9IDE7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb250ZW50LmxhYmVscy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgdmFyIHRMYWJlbCA9IGNvbnRlbnQubGFiZWxzW2luZGV4XTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodExhYmVsKSkge1xuICAgICAgICAgIG1heFRleHRTdGFja1NpemUgPSBNYXRoLm1heChtYXhUZXh0U3RhY2tTaXplLCB0TGFiZWwubGVuZ3RoKTtcbiAgICAgICAgICBmb3IgKGluZGV4MiA9IDA7IGluZGV4MiA8IHRMYWJlbC5sZW5ndGg7ICsraW5kZXgyKSB7XG4gICAgICAgICAgICBtYXhUZXh0V2lkdGggPSBNYXRoLm1heChtYXhUZXh0V2lkdGgsIGN0eC5tZWFzdXJlVGV4dCh0TGFiZWxbaW5kZXgyXSkud2lkdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIG1heFRleHRXaWR0aCA9IE1hdGgubWF4KG1heFRleHRXaWR0aCwgY3R4Lm1lYXN1cmVUZXh0KHRMYWJlbCkud2lkdGgpO1xuICAgICAgfVxuICAgICAgdmFyIHhMYWJlbHNSb3RhdGVkID0gZmFsc2U7XG4gICAgICBpZiAobWF4VGV4dFdpZHRoID4gd2lkdGhQZXJCYXIgLSBjb21wdXRlZEJhclBhZGRpbmcpIHtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgIGN0eC5yb3RhdGUoTWF0aC5QSSAqIDEuNSk7XG4gICAgICAgIHhMYWJlbHNSb3RhdGVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0TGFiZWxZID0gLW9wdGlvbnMuZm9udFNpemVMYWJlbHM7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb250ZW50LmxhYmVscy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgdmFyIGNMYWJlbCA9IGNvbnRlbnQubGFiZWxzW2luZGV4XTtcbiAgICAgICAgdmFyIHggPSBsZWZ0WFBhZGRpbmcgKyBpbmRleCAqIHdpZHRoUGVyQmFyICsgd2lkdGhQZXJCYXIgLyAyLCB5ID0gdG9wWVBhZGRpbmcgKyByZW1haW5pbmdIZWlnaHQgLSBvcHRpb25zLmZvbnRTaXplTGFiZWxzIC8gMjtcbiAgICAgICAgaWYgKHhMYWJlbHNSb3RhdGVkKSB7XG4gICAgICAgICAgeSA9IHRvcFlQYWRkaW5nICsgcmVtYWluaW5nSGVpZ2h0IC0gbWF4VGV4dFdpZHRoICsgNTtcbiAgICAgICAgICB5ID0gW3gsIHggPSAteV1bMF07XG5cbiAgICAgICAgICBpZiAoeSA8IGxhc3RMYWJlbFkgKyBvcHRpb25zLmZvbnRTaXplTGFiZWxzKSBjb250aW51ZTtcbiAgICAgICAgICBsYXN0TGFiZWxZID0geTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgeVVwID0gb3B0aW9ucy5mb250U2l6ZUxhYmVscyAqIChtYXhUZXh0U3RhY2tTaXplIC0gMSk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNMYWJlbCkpIHtcbiAgICAgICAgICBpZiAoeExhYmVsc1JvdGF0ZWQpIHtcbiAgICAgICAgICAgIHlVcCA9IG9wdGlvbnMuZm9udFNpemVMYWJlbHMgKiAoY0xhYmVsLmxlbmd0aCAtIDEuNSk7XG4gICAgICAgICAgICB5VXAgLz0gMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChpbmRleDIgPSAwOyBpbmRleDIgPCBjTGFiZWwubGVuZ3RoOyArK2luZGV4Mikge1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGNMYWJlbFtpbmRleDJdLCB4LCB5IC0geVVwKTtcbiAgICAgICAgICAgIHlVcCAtPSBvcHRpb25zLmZvbnRTaXplTGFiZWxzO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoeExhYmVsc1JvdGF0ZWQpIHlVcCA9IC1vcHRpb25zLmZvbnRTaXplTGFiZWxzICogMC4yNTtcbiAgICAgICAgICBjdHguZmlsbFRleHQoY0xhYmVsLCB4LCB5IC0geVVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHhMYWJlbHNSb3RhdGVkKSB7XG4gICAgICAgIHJlbWFpbmluZ0hlaWdodCAtPSBtYXhUZXh0V2lkdGggKyA1O1xuICAgICAgICBib3R0b21ZUGFkZGluZyArPSBtYXhUZXh0V2lkdGggKyA1O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlbVZhbCA9IG9wdGlvbnMuZm9udFNpemVMYWJlbHMgKiBtYXhUZXh0U3RhY2tTaXplO1xuICAgICAgICByZW1WYWwgKz0gb3B0aW9ucy5mb250U2l6ZUxhYmVscyAqIDAuNTtcbiAgICAgICAgcmVtYWluaW5nSGVpZ2h0IC09IHJlbVZhbDtcbiAgICAgICAgYm90dG9tWVBhZGRpbmcgKz0gcmVtVmFsO1xuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcblxuICAgICAgLyogRHJhdyBib3VuZGFyaWVzICovXG4gICAgICB2YXIgYm91bmRYMSA9IGxlZnRYUGFkZGluZywgYm91bmRYMiA9IGxlZnRYUGFkZGluZyArIHJlbWFpbmluZ1dpZHRoO1xuICAgICAgdmFyIGJvdW5kWTEgPSB0b3BZUGFkZGluZywgYm91bmRZMiA9IHRvcFlQYWRkaW5nICsgcmVtYWluaW5nSGVpZ2h0O1xuXG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb250ZW50LmxhYmVscy5sZW5ndGg7ICsraW5kZXgpIGxhYmVsUG9zaXRpb25zW2luZGV4XSA9IHtcbiAgICAgICAgeFN0YXJ0OiBsZWZ0WFBhZGRpbmcgKyBpbmRleCAqIHdpZHRoUGVyQmFyLFxuICAgICAgICB4RW5kOiBsZWZ0WFBhZGRpbmcgKyAoMSArIGluZGV4KSAqIHdpZHRoUGVyQmFyLFxuICAgICAgICB5U3RhcnQ6IGJvdW5kWTEsIHlFbmQ6IGJvdW5kWTJcbiAgICAgIH1cblxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZ2IoMCwgMCwgMCknO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgaWYgKGNvbnRlbnQudG9wTGFiZWxzICE9IG51bGwpIHtcbiAgICAgICAgY3R4Lm1vdmVUbyhib3VuZFgyLCBib3VuZFkxKTtcbiAgICAgICAgY3R4LmxpbmVUbyhib3VuZFgxLCBib3VuZFkxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5tb3ZlVG8oYm91bmRYMSwgYm91bmRZMSk7XG4gICAgICB9XG4gICAgICBjdHgubGluZVRvKGJvdW5kWDEsIGJvdW5kWTIpO1xuICAgICAgY3R4LmxpbmVUbyhib3VuZFgyLCBib3VuZFkyKTtcbiAgICAgIGlmIChjb250ZW50LnRvcExhYmVscyAhPSBudWxsKSBjdHgubGluZVRvKGxlZnRYUGFkZGluZyArIHJlbWFpbmluZ1dpZHRoLCB0b3BZUGFkZGluZyk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuXG4gICAgICAvKiBEcmF3IHRvcCBsYWJlbCAqL1xuICAgICAgaWYgKGNvbnRlbnQudG9wTGFiZWwgIT0gbnVsbCkge1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgY3R4LmZvbnQgPSBIZWxwZXJzLmdldEZvbnQoeyB3ZWlnaHQ6IG9wdGlvbnMuZm9udFdlaWdodCwgc2l6ZTogb3B0aW9ucy5mb250U2l6ZUxhYmVscywgZmFtaWx5OiBvcHRpb25zLmZvbnQgfSk7XG4gICAgICAgIGN0eC5maWxsVGV4dChjb250ZW50LnRvcExhYmVsLCBsZWZ0WFBhZGRpbmcgLSAzLCB0b3BZUGFkZGluZyAtIG9wdGlvbnMuZm9udFNpemVMYWJlbHMgLyAyKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIH1cblxuICAgICAgLyogRHJhdyB5LWF4aXMgbGFiZWwgb2YgYmFyIGNoYXJ0ICovXG4gICAgICBpZiAoY29udGVudC55QXhpcyAhPSBudWxsKSB7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5yb3RhdGUoTWF0aC5QSSAqIDEuNSk7XG4gICAgICAgIGN0eC5mb250ID0gSGVscGVycy5nZXRGb250KHsgd2VpZ2h0OiBvcHRpb25zLmZvbnRXZWlnaHQsIHNpemU6IG9wdGlvbnMuZm9udFNpemVBeGVzLCBmYW1pbHk6IG9wdGlvbnMuZm9udCB9KTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2IoMCwgMCwgMCknO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgIGN0eC5maWxsVGV4dChjb250ZW50LnlBeGlzLCAtKHRvcFlQYWRkaW5nICsgcmVtYWluaW5nSGVpZ2h0IC8gMiksIGxlZnRYRHJhd1lMYWJlbCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICB9XG5cbiAgICAgIC8qIERyYXcgeS1heGlzIGxhYmVscyAqL1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiKDAsIDAsIDApJztcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuMjApJztcbiAgICAgIGN0eC5mb250ID0gSGVscGVycy5nZXRGb250KHsgd2VpZ2h0OiBvcHRpb25zLmZvbnRXZWlnaHQsIHNpemU6IG9wdGlvbnMuZm9udFNpemVUaWNrcywgZmFtaWx5OiBvcHRpb25zLmZvbnQgfSk7XG4gICAgICBjdHgudGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgIHZhciB0aWNrTWV0YSA9IEhlbHBlcnMuZ2V0TGluZWFyVGlja3MoMCwgbWF4Q2hhcnRWYWx1ZSwgTWF0aC5tYXgoMiwgcmVtYWluaW5nSGVpZ2h0IC8gKG9wdGlvbnMuZm9udFNpemVUaWNrcyAqICgxICsgb3B0aW9ucy5wYWRkaW5nUGVyY2VudFRpY2tzKSkpKTtcbiAgICAgIHZhciBhbHBoYSA9IG1heENoYXJ0VmFsdWUgLyBvcHRpb25zLmZvbnRTaXplVGlja3M7XG4gICAgICBtYXhDaGFydFZhbHVlID0gdGlja01ldGFbMV07XG4gICAgICBpZiAobWF4Q2hhcnRWYWx1ZSA+IDEpIG1heENoYXJ0VmFsdWUgKz0gTWF0aC5jZWlsKGFscGhhKTtcbiAgICAgIGVsc2UgbWF4Q2hhcnRWYWx1ZSArPSBhbHBoYTtcbiAgICAgIHZhciB0aWNrcyA9IFtdO1xuICAgICAgd2hpbGUgKHRpY2tNZXRhWzBdIDw9IHRpY2tNZXRhWzFdKSB7XG4gICAgICAgIHRpY2tzLnB1c2godGlja01ldGFbMF0pO1xuICAgICAgICB0aWNrTWV0YVswXSArPSB0aWNrTWV0YVsyXTtcbiAgICAgIH1cbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRpY2tzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICB2YXIgdGlja0hlaWdodCA9IE1hdGgucm91bmQocmVtYWluaW5nSGVpZ2h0ICogSGVscGVycy5nZXRBeGlzUmF0aW8obWluQ2hhcnRWYWx1ZSwgbWF4Q2hhcnRWYWx1ZSwgdGlja3NbaW5kZXhdKSk7XG4gICAgICAgIGlmICh0aWNrSGVpZ2h0IDwgMCkgY29udGludWU7XG4gICAgICAgIGlmIChvcHRpb25zLnNjYWxlU3R5bGUgPT0gJ2xvZzInICYmIHRpY2tzW2luZGV4XSAhPT0gMCkgdGlja3NbaW5kZXhdID0gTWF0aC5yb3VuZChNYXRoLnBvdygyLCB0aWNrc1tpbmRleF0pKTtcbiAgICAgICAgZWxzZSB0aWNrc1tpbmRleF0gPSBNYXRoLmZsb29yKHRpY2tzW2luZGV4XSAqIDEwMCkgLyAxMDA7XG4gICAgICAgIGlmIChvcHRpb25zLnRpY2tGb3JtYXR0ZXIgIT0gbnVsbCAmJiB0eXBlb2Ygb3B0aW9ucy50aWNrRm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY3R4LmZpbGxUZXh0KG9wdGlvbnMudGlja0Zvcm1hdHRlcih0aWNrc1tpbmRleF0pLnRvU3RyaW5nKCksIGxlZnRYUGFkZGluZyAtIG9wdGlvbnMucGFkZGluZ1BpeGVsc1RpY2tzLCB0b3BZUGFkZGluZyArIHJlbWFpbmluZ0hlaWdodCAtIHRpY2tIZWlnaHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0eC5maWxsVGV4dCh0aWNrc1tpbmRleF0udG9TdHJpbmcoKSwgbGVmdFhQYWRkaW5nIC0gb3B0aW9ucy5wYWRkaW5nUGl4ZWxzVGlja3MsIHRvcFlQYWRkaW5nICsgcmVtYWluaW5nSGVpZ2h0IC0gdGlja0hlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ID09IDApIGNvbnRpbnVlO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8obGVmdFhQYWRkaW5nLCB0b3BZUGFkZGluZyArIHJlbWFpbmluZ0hlaWdodCAtIHRpY2tIZWlnaHQpO1xuICAgICAgICBjdHgubGluZVRvKGxlZnRYUGFkZGluZyArIHJlbWFpbmluZ1dpZHRoLCB0b3BZUGFkZGluZyArIHJlbWFpbmluZ0hlaWdodCAtIHRpY2tIZWlnaHQpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICB9XG4gICAgICBjdHgucmVzdG9yZSgpO1xuXG4gICAgICBpZiAoY29udGVudC5iYXJzICE9IG51bGwgJiYgQXJyYXkuaXNBcnJheShjb250ZW50LmJhcnMpKSB7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvbnRlbnQuYmFycy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICB2YXIgY0JhciA9IGNvbnRlbnQuYmFyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGNCYXIudmFsdWUgPiBtYXhDaGFydFZhbHVlKSBjb250aW51ZTtcbiAgICAgICAgICB2YXIgcmVuZGVyQmFyWSA9IHRvcFlQYWRkaW5nICsgcmVtYWluaW5nSGVpZ2h0IC0gTWF0aC5yb3VuZChyZW1haW5pbmdIZWlnaHQgKiBIZWxwZXJzLmdldEF4aXNSYXRpbyhtaW5DaGFydFZhbHVlLCBtYXhDaGFydFZhbHVlLCBjQmFyLnZhbHVlKSk7XG4gICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY0Jhci5zdHlsZTtcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY0Jhci5zdHlsZTtcbiAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgY3R4Lm1vdmVUbyhib3VuZFgxLCByZW5kZXJCYXJZKTtcbiAgICAgICAgICBjdHgubGluZVRvKGJvdW5kWDIsIHJlbmRlckJhclkpO1xuICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICB9XG5cbiAgICAgIC8qIERyYXcgYmFycyAqL1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIHZhciBsYXN0RGF0YSA9IG51bGw7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb250ZW50LmRhdGEubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIHZhciBmaWxsQ29sb3JGb3JJbmRleCA9IG51bGw7XG4gICAgICAgIHZhciBzdHJva2VDb2xvckZvckluZGV4ID0gbnVsbDtcbiAgICAgICAgaWYgKGNvbnRlbnQuZmlsbENvbG9yICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb250ZW50LmZpbGxDb2xvcikpIGZpbGxDb2xvckZvckluZGV4ID0gY3R4LmZpbGxTdHlsZSA9IGNvbnRlbnQuZmlsbENvbG9yW2luZGV4XTtcbiAgICAgICAgICBlbHNlIGN0eC5maWxsU3R5bGUgPSBjb250ZW50LmZpbGxDb2xvcjtcbiAgICAgICAgfSBlbHNlIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmZpbGxDb2xvckJhcnM7XG4gICAgICAgIGlmIChjb250ZW50LnN0cm9rZUNvbG9yICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb250ZW50LnN0cm9rZUNvbG9yKSkgc3Ryb2tlQ29sb3JGb3JJbmRleCA9IGN0eC5zdHJva2VTdHlsZSA9IGNvbnRlbnQuc3Ryb2tlQ29sb3JbaW5kZXhdO1xuICAgICAgICAgIGVsc2UgY3R4LnN0cm9rZVN0eWxlID0gY29udGVudC5zdHJva2VDb2xvcjtcbiAgICAgICAgfSBlbHNlIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuc3Ryb2tlQ29sb3JCYXJzO1xuICAgICAgICB2YXIgdiA9IGNvbnRlbnQuZGF0YVtpbmRleF07XG4gICAgICAgIHZhciB2SXNBcnIgPSBBcnJheS5pc0FycmF5KHYpO1xuICAgICAgICB2YXIgcmVuZGVyU3RhcnRYID0gbGVmdFhQYWRkaW5nICsgd2lkdGhQZXJCYXIgKiBpbmRleDtcbiAgICAgICAgaWYgKHZJc0FyciAmJiBvcHRpb25zLmJhclN0eWxlID09PSAnc3RhY2tlZCcpIHtcbiAgICAgICAgICB2YXIgcnVubmluZ1ZhbHVlID0gMCwgbGFzdEhlaWdodCA9IDA7XG4gICAgICAgICAgZm9yICh2YXIgZHJhd0luZGV4ID0gMDsgZHJhd0luZGV4IDwgdi5sZW5ndGg7ICsrZHJhd0luZGV4KSB7XG4gICAgICAgICAgICBpZiAoZmlsbENvbG9yRm9ySW5kZXggIT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KGZpbGxDb2xvckZvckluZGV4KSkge1xuICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZmlsbENvbG9yRm9ySW5kZXhbZHJhd0luZGV4XSB8fCBvcHRpb25zLmZpbGxDb2xvckJhcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3Ryb2tlQ29sb3JGb3JJbmRleCAhPSBudWxsICYmIEFycmF5LmlzQXJyYXkoc3Ryb2tlQ29sb3JGb3JJbmRleCkpIHtcbiAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3Ryb2tlQ29sb3JGb3JJbmRleFtkcmF3SW5kZXhdIHx8IG9wdGlvbnMuc3Ryb2tlQ29sb3JCYXJzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBydW5uaW5nVmFsdWUgKz0gdltkcmF3SW5kZXhdO1xuICAgICAgICAgICAgdmFyIHJlbmRlckJhckhlaWdodCA9IE1hdGguZmxvb3IocmVtYWluaW5nSGVpZ2h0ICogSGVscGVycy5nZXRBeGlzUmF0aW8obWluQ2hhcnRWYWx1ZSwgbWF4Q2hhcnRWYWx1ZSwgcnVubmluZ1ZhbHVlKSk7XG4gICAgICAgICAgICB2YXIgcmVuZGVyVXBUb1kgPSB0b3BZUGFkZGluZyArIHJlbWFpbmluZ0hlaWdodCAtIHJlbmRlckJhckhlaWdodDtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhyZW5kZXJCYXJIZWlnaHQgLSBsYXN0SGVpZ2h0KSA8IG9wdGlvbnMuc3RhY2tlZEJhclBhZGRpbmcgKyAyKSB7XG4gICAgICAgICAgICAgIGxhc3RIZWlnaHQgPSByZW5kZXJCYXJIZWlnaHQ7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgYmFyUGFkUCA9IGRyYXdJbmRleCA+IDAgPyBvcHRpb25zLnN0YWNrZWRCYXJQYWRkaW5nIDogMDtcbiAgICAgICAgICAgIHZhciB0U1gsIHRTWTtcbiAgICAgICAgICAgIHZhciB0RVgsIHRFWTtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8odFNYID0gcmVuZGVyU3RhcnRYICsgY29tcHV0ZWRCYXJQYWRkaW5nLCB0U1kgPSB0b3BZUGFkZGluZyArIHJlbWFpbmluZ0hlaWdodCAtIGxhc3RIZWlnaHQgLSBiYXJQYWRQKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8ocmVuZGVyU3RhcnRYICsgY29tcHV0ZWRCYXJQYWRkaW5nLCByZW5kZXJVcFRvWSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHRFWCA9IHJlbmRlclN0YXJ0WCArICh3aWR0aFBlckJhciAtIDEpIC0gY29tcHV0ZWRCYXJQYWRkaW5nLCB0RVkgPSByZW5kZXJVcFRvWSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHJlbmRlclN0YXJ0WCArICh3aWR0aFBlckJhciAtIDEpIC0gY29tcHV0ZWRCYXJQYWRkaW5nLCB0b3BZUGFkZGluZyArIHJlbWFpbmluZ0hlaWdodCAtIGxhc3RIZWlnaHQgLSBiYXJQYWRQKTtcbiAgICAgICAgICAgIGlmIChkcmF3SW5kZXggPiAwKSBjdHgubGluZVRvKHRTWCwgdFNZKTtcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICB2YXIgaGludDtcbiAgICAgICAgICAgIGlmIChjb250ZW50LmhpbnRzICE9IG51bGwgJiYgY29udGVudC5oaW50c1tpbmRleF0gIT0gbnVsbCAmJiAoaGludCA9IGNvbnRlbnQuaGludHNbaW5kZXhdW2RyYXdJbmRleF0pICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhpcy5tb3VzZUxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uKGluZGV4LCBkcmF3SW5kZXgsIGhpbnQsIHN4LCBzeSwgZXgsIGV5LCB4LCB5KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1pblggPSBNYXRoLm1pbihzeCwgZXgpLCBtYXhYID0gTWF0aC5tYXgoc3gsIGV4KTtcbiAgICAgICAgICAgICAgICB2YXIgbWluWSA9IE1hdGgubWluKHN5LCBleSksIG1heFkgPSBNYXRoLm1heChzeSwgZXkpO1xuICAgICAgICAgICAgICAgIGlmICh4IDwgbWluWCB8fCB4ID4gbWF4WCB8fCB5IDwgbWluWSB8fCB5ID4gbWF4WSkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgaW5kZXg6IGluZGV4LCBkcmF3SW5kZXg6IGRyYXdJbmRleCwgcmVjdDogeyBsZWZ0OiBtaW5YLCByaWdodDogbWF4WCwgdG9wOiBtaW5ZLCBib3R0b206IG1heFkgfSwgdGV4dDogaGludC5zcGxpdCgnXFxuJykgfTtcbiAgICAgICAgICAgICAgfS5iaW5kKHRoaXMsIGluZGV4LCBkcmF3SW5kZXgsIGhpbnQsIHRTWCwgdFNZLCB0RVgsIHRFWSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdGFnVGV4dDtcbiAgICAgICAgICAgIGlmICh0U1kgLSByZW5kZXJVcFRvWSA+IG9wdGlvbnMuZm9udERhdGFUYWdzICogMS4yNSAmJiBjb250ZW50LmRhdGFUYWdzICE9IG51bGwgJiYgKHRhZ1RleHQgPSBjb250ZW50LmRhdGFUYWdzW2luZGV4XSkgIT0gbnVsbCAmJiAodGFnVGV4dCA9IHRhZ1RleHRbZHJhd0luZGV4XSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YXIgb0ZTID0gY3R4LmZpbGxTdHlsZTtcbiAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2IoMCwgMCwgMCknO1xuICAgICAgICAgICAgICBjdHguZm9udCA9IEhlbHBlcnMuZ2V0Rm9udCh7IHdlaWdodDogb3B0aW9ucy5mb250V2VpZ2h0LCBzaXplOiBvcHRpb25zLmZvbnREYXRhVGFncywgZmFtaWx5OiBvcHRpb25zLmZvbnQgfSk7XG4gICAgICAgICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KHRhZ1RleHQsIHJlbmRlclN0YXJ0WCArIHdpZHRoUGVyQmFyIC8gMiwgdFNZIC0gb3B0aW9ucy5mb250RGF0YVRhZ3MgKiAwLjI1KTtcbiAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9GUztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGFzdEhlaWdodCA9IHJlbmRlckJhckhlaWdodDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY29udGVudC5iYXJUb29sdGlwcyAhPSBudWxsKSB7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYigwLCAwLCAwKSc7XG4gICAgICAgICAgICBjdHguZm9udCA9IEhlbHBlcnMuZ2V0Rm9udCh7IHdlaWdodDogb3B0aW9ucy5mb250V2VpZ2h0LCBzaXplOiBvcHRpb25zLmZvbnRTaXplTGFiZWxzLCBmYW1pbHk6IG9wdGlvbnMuZm9udCB9KTtcbiAgICAgICAgICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChjb250ZW50LmJhclRvb2x0aXBzW2luZGV4XSB8fCAnJywgcmVuZGVyU3RhcnRYICsgd2lkdGhQZXJCYXIgLyAyLCByZW5kZXJVcFRvWSAtIDMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmJhclN0eWxlID09PSAnbGluZScpIHtcbiAgICAgICAgICBpZiAodklzQXJyKSB7XG4gICAgICAgICAgICB2YXIgcmJ4ID0gcmVuZGVyU3RhcnRYICsgd2lkdGhQZXJCYXIgLyAyO1xuXG4gICAgICAgICAgICB2YXIgbER1O1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZmlsbFJlZ2lvbiA9PT0gJ2JhY2tncm91bmQnKSB7XG4gICAgICAgICAgICAgIGxEdSA9IGxhc3REYXRhO1xuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShsRHUpKSBsRHUgPSBsRHVbMF07XG4gICAgICAgICAgICAgIGlmIChsRHUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBzRlMgPSBjdHguZmlsbFN0eWxlXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGxEdS5jb2xvclxuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChsRHUueCwgYm91bmRZMSwgcmJ4IC0gbER1LngsIGJvdW5kWTIgLSBib3VuZFkxKVxuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBzRlNcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbkxEYXRhID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBkcmF3SW5kZXggPSAwOyBkcmF3SW5kZXggPCB2Lmxlbmd0aDsgKytkcmF3SW5kZXgpIHtcbiAgICAgICAgICAgICAgdmFyIHJlbmRlckJhckhlaWdodDMgPSBNYXRoLnJvdW5kKHJlbWFpbmluZ0hlaWdodCAqIEhlbHBlcnMuZ2V0QXhpc1JhdGlvKG1pbkNoYXJ0VmFsdWUsIG1heENoYXJ0VmFsdWUsIHZbZHJhd0luZGV4XSkpO1xuICAgICAgICAgICAgICB2YXIgcmVuZGVyVXBUb1kzID0gdG9wWVBhZGRpbmcgKyByZW1haW5pbmdIZWlnaHQgLSByZW5kZXJCYXJIZWlnaHQzO1xuXG4gICAgICAgICAgICAgIHZhciByYnkgPSByZW5kZXJVcFRvWTM7XG4gICAgICAgICAgICAgIGlmIChsYXN0RGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRMWCwgdExZO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGxhc3REYXRhKSkge1xuICAgICAgICAgICAgICAgICAgdExYID0gKGxhc3REYXRhW2RyYXdJbmRleF0gfHwgeyB9KS54O1xuICAgICAgICAgICAgICAgICAgdExZID0gKGxhc3REYXRhW2RyYXdJbmRleF0gfHwgeyB9KS55O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0TFggPSBsYXN0RGF0YS54O1xuICAgICAgICAgICAgICAgICAgdExZID0gbGFzdERhdGEueTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodExYICYmIHRMWSkge1xuICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3Ryb2tlQ29sb3JGb3JJbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3Ryb2tlQ29sb3JGb3JJbmRleFtkcmF3SW5kZXhdIHx8IG9wdGlvbnMuc3Ryb2tlQ29sb3JCYXJzO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yRm9ySW5kZXggfHwgJ3JnYigwLCAwLCAwKSc7XG4gICAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICBjdHgubW92ZVRvKHRMWCwgdExZKTtcbiAgICAgICAgICAgICAgICAgIGN0eC5saW5lVG8ocmJ4LCByYnkpO1xuICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZpbGxDb2xvckZvckluZGV4KSkge1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBmaWxsQ29sb3JGb3JJbmRleFtkcmF3SW5kZXhdIHx8IG9wdGlvbnMuZmlsbENvbG9yQmFycztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHJva2VDb2xvckZvckluZGV4KSkge1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yRm9ySW5kZXhbZHJhd0luZGV4XSB8fCBvcHRpb25zLnN0cm9rZUNvbG9yQmFycztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgY3R4LmFyYyhyYngsIHJieSwgb3B0aW9ucy5yYWRpdXNEb3QsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuXG4gICAgICAgICAgICAgIG5MRGF0YVtkcmF3SW5kZXhdID0geyB4OiByYngsIHk6IHJieSwgY29sb3I6IGN0eC5maWxsU3R5bGUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3REYXRhID0gbkxEYXRhO1xuICAgICAgICAgICAgaWYgKGxEdSAhPSBudWxsICYmIGxEdS5jb2xvciAhPSBsYXN0RGF0YVswXS5jb2xvcikgdGhpcy5maWxsUmVnaW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgeDogbGFzdERhdGFbMF0ueCxcbiAgICAgICAgICAgICAgeTogbGFzdERhdGFbMF0ueSxcbiAgICAgICAgICAgICAgcHJldjogbER1LmNvbG9yLFxuICAgICAgICAgICAgICBuZXh0OiBsYXN0RGF0YVswXS5jb2xvclxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgaWYgKGNvbnRlbnQuYmFsbHMgIT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KGNvbnRlbnQuYmFsbHMpICYmIGluZGV4IDwgY29udGVudC5iYWxscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdmFyIGJhbGwgPSBjb250ZW50LmJhbGxzW2luZGV4XVxuICAgICAgICAgICAgICBpZiAoYmFsbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWxsLmZpbGw7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gYmFsbC5zdHJva2U7XG4gICAgICAgICAgICAgICAgY3R4LmFyYyhyYngsIHRvcFlQYWRkaW5nICsgcmVtYWluaW5nSGVpZ2h0IC0gKHJlbWFpbmluZ0hlaWdodCAqIEhlbHBlcnMuZ2V0QXhpc1JhdGlvKG1pbkNoYXJ0VmFsdWUsIG1heENoYXJ0VmFsdWUsIG1pbkNoYXJ0VmFsdWUgKyBiYWxsLnZhbHVlKSksIGJhbGwucmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlbmRlckJhckhlaWdodDMgPSBNYXRoLnJvdW5kKHJlbWFpbmluZ0hlaWdodCAqIEhlbHBlcnMuZ2V0QXhpc1JhdGlvKG1pbkNoYXJ0VmFsdWUsIG1heENoYXJ0VmFsdWUsIHYpKTtcbiAgICAgICAgICAgIHZhciByZW5kZXJVcFRvWTMgPSB0b3BZUGFkZGluZyArIHJlbWFpbmluZ0hlaWdodCAtIHJlbmRlckJhckhlaWdodDM7XG5cbiAgICAgICAgICAgIHZhciByYnggPSByZW5kZXJTdGFydFggKyB3aWR0aFBlckJhciAvIDIsIHJieSA9IHJlbmRlclVwVG9ZMztcbiAgICAgICAgICAgIHZhciBsRHU7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5maWxsUmVnaW9uID09PSAnYmFja2dyb3VuZCcpIHtcbiAgICAgICAgICAgICAgaWYgKGxhc3REYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsRHUgPSBsYXN0RGF0YTtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShsRHUpKSBsRHUgPSBsRHVbMF07XG4gICAgICAgICAgICAgICAgdmFyIHNGUyA9IGN0eC5maWxsU3R5bGVcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbER1LmNvbG9yXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGxEdS54LCBib3VuZFkxLCByYnggLSBsRHUueCwgYm91bmRZMiAtIGJvdW5kWTEpXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHNGU1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHguYXJjKHJieCwgcmJ5LCBvcHRpb25zLnJhZGl1c0RvdCwgMCwgMiAqIE1hdGguUEkpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgY3R4LmZpbGwoKTtcblxuICAgICAgICAgICAgaWYgKGxhc3REYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobGFzdERhdGEpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRMWCwgdExZO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBsYXN0RGF0YSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFsYXN0RGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgIHRMWCA9IGxhc3REYXRhW2tleV0ueDtcbiAgICAgICAgICAgICAgICAgIHRMWSA9IGxhc3REYXRhW2tleV0ueTtcbiAgICAgICAgICAgICAgICAgIGlmICh0TFggJiYgdExZKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yRm9ySW5kZXggfHwgJ3JnYigwLCAwLCAwKSc7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh0TFgsIHRMWSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5saW5lVG8ocmJ4LCByYnkpO1xuICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB0TFggPSBsYXN0RGF0YS54LCB0TFkgPSBsYXN0RGF0YS55O1xuICAgICAgICAgICAgICAgIGlmICh0TFggJiYgdExZKSB7XG4gICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBzdHJva2VDb2xvckZvckluZGV4IHx8ICdyZ2IoMCwgMCwgMCknO1xuICAgICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh0TFgsIHRMWSk7XG4gICAgICAgICAgICAgICAgICBjdHgubGluZVRvKHJieCwgcmJ5KTtcbiAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGFzdERhdGEgPSB7IHg6IHJieCwgeTogcmJ5LCBjb2xvcjogY3R4LmZpbGxTdHlsZSB9O1xuICAgICAgICAgICAgaWYgKGxEdSAhPSBudWxsICYmIGxEdS5jb2xvciAhPSBsYXN0RGF0YS5jb2xvcikgdGhpcy5maWxsUmVnaW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgeDogbGFzdERhdGEueCxcbiAgICAgICAgICAgICAgeTogbGFzdERhdGEueSxcbiAgICAgICAgICAgICAgcHJldjogbER1LmNvbG9yLFxuICAgICAgICAgICAgICBuZXh0OiBsYXN0RGF0YS5jb2xvclxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgaWYgKGNvbnRlbnQuYmFsbHMgIT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KGNvbnRlbnQuYmFsbHMpICYmIGluZGV4IDwgY29udGVudC5iYWxscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdmFyIGJhbGwgPSBjb250ZW50LmJhbGxzW2luZGV4XVxuICAgICAgICAgICAgICBpZiAoYmFsbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWxsLmZpbGw7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gYmFsbC5zdHJva2U7XG4gICAgICAgICAgICAgICAgY3R4LmFyYyhyYngsIHRvcFlQYWRkaW5nICsgcmVtYWluaW5nSGVpZ2h0IC0gKHJlbWFpbmluZ0hlaWdodCAqIEhlbHBlcnMuZ2V0QXhpc1JhdGlvKG1pbkNoYXJ0VmFsdWUsIG1heENoYXJ0VmFsdWUsIG1pbkNoYXJ0VmFsdWUgKyBiYWxsLnZhbHVlKSksIGJhbGwucmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgaGludDtcbiAgICAgICAgICBpZiAoY29udGVudC5oaW50cyAhPSBudWxsICYmIChoaW50ID0gY29udGVudC5oaW50c1tpbmRleF0pICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMubW91c2VMaXN0ZW5lcnMucHVzaChmdW5jdGlvbihpbmRleCwgaGludCwgc3gsIHN5LCBleCwgZXksIHgsIHkpIHtcbiAgICAgICAgICAgICAgdmFyIG1pblggPSBNYXRoLm1pbihzeCwgZXgpLCBtYXhYID0gTWF0aC5tYXgoc3gsIGV4KTtcbiAgICAgICAgICAgICAgdmFyIG1pblkgPSBNYXRoLm1pbihzeSwgZXkpLCBtYXhZID0gTWF0aC5tYXgoc3ksIGV5KTtcbiAgICAgICAgICAgICAgaWYgKHggPCBtaW5YIHx8IHggPiBtYXhYIHx8IHkgPCBtaW5ZIHx8IHkgPiBtYXhZKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHsgaW5kZXg6IGluZGV4LCBkcmF3SW5kZXg6IGRyYXdJbmRleCwgcmVjdDogeyBsZWZ0OiBtaW5YLCByaWdodDogbWF4WCwgdG9wOiBtaW5ZLCBib3R0b206IG1heFkgfSwgdGV4dDogaGludC5zcGxpdCgnXFxuJykgfTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzLCBpbmRleCwgaGludCwgcmJ4IC0gMSwgdG9wWVBhZGRpbmcsIHJieCArIDEsIHRvcFlQYWRkaW5nICsgcmVtYWluaW5nSGVpZ2h0KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2SXNBcnIpIHYgPSBIZWxwZXJzLmF2Zyh2KTtcbiAgICAgICAgICB2YXIgcmVuZGVyQmFySGVpZ2h0MiA9IE1hdGgucm91bmQocmVtYWluaW5nSGVpZ2h0ICogSGVscGVycy5nZXRBeGlzUmF0aW8obWluQ2hhcnRWYWx1ZSwgbWF4Q2hhcnRWYWx1ZSwgdikpO1xuICAgICAgICAgIHZhciByZW5kZXJVcFRvWTIgPSB0b3BZUGFkZGluZyArIHJlbWFpbmluZ0hlaWdodCAtIHJlbmRlckJhckhlaWdodDI7XG4gICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgIGN0eC5tb3ZlVG8ocmVuZGVyU3RhcnRYICsgY29tcHV0ZWRCYXJQYWRkaW5nLCB0b3BZUGFkZGluZyArIHJlbWFpbmluZ0hlaWdodCk7XG4gICAgICAgICAgY3R4LmxpbmVUbyhyZW5kZXJTdGFydFggKyBjb21wdXRlZEJhclBhZGRpbmcsIHJlbmRlclVwVG9ZMik7XG4gICAgICAgICAgY3R4LmxpbmVUbyhyZW5kZXJTdGFydFggKyAod2lkdGhQZXJCYXIgLSAxKSAtIGNvbXB1dGVkQmFyUGFkZGluZywgcmVuZGVyVXBUb1kyKTtcbiAgICAgICAgICBjdHgubGluZVRvKHJlbmRlclN0YXJ0WCArICh3aWR0aFBlckJhciAtIDEpIC0gY29tcHV0ZWRCYXJQYWRkaW5nLCB0b3BZUGFkZGluZyArIHJlbWFpbmluZ0hlaWdodCk7XG4gICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgIGN0eC5maWxsKCk7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5iYXJTdHlsZSA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgdmFyIHZhbDtcbiAgICAgICAgICAgIGlmICgodmFsID0gY29udGVudC5fZGF0YV9zdGFuZGFyZF9lcnJvcltpbmRleF0pICE9IDApIHtcbiAgICAgICAgICAgICAgdmFyIHJlbmRlckJhckVycm9yID0gTWF0aC5yb3VuZChyZW1haW5pbmdIZWlnaHQgKiBIZWxwZXJzLmdldEF4aXNSYXRpbyhtaW5DaGFydFZhbHVlLCBtYXhDaGFydFZhbHVlLCB2YWwpKTtcbiAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICB2YXIgd2lza2VyV2lkdGggPSBNYXRoLnJvdW5kKCh3aWR0aFBlckJhciAtIGNvbXB1dGVkQmFyUGFkZGluZyAqIDIpIC8gOCk7XG4gICAgICAgICAgICAgIHZhciB4XyA9IGxlZnRYUGFkZGluZyArIHdpZHRoUGVyQmFyICogaW5kZXggKyB3aWR0aFBlckJhciAvIDI7XG4gICAgICAgICAgICAgIGN0eC5tb3ZlVG8oeF8gLSB3aXNrZXJXaWR0aCwgcmVuZGVyVXBUb1kyICsgcmVuZGVyQmFyRXJyb3IpO1xuICAgICAgICAgICAgICBjdHgubGluZVRvKHhfICsgd2lza2VyV2lkdGgsIHJlbmRlclVwVG9ZMiArIHJlbmRlckJhckVycm9yKTtcbiAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh4XywgcmVuZGVyVXBUb1kyICsgcmVuZGVyQmFyRXJyb3IpO1xuICAgICAgICAgICAgICBjdHgubGluZVRvKHhfLCByZW5kZXJVcFRvWTIgLSByZW5kZXJCYXJFcnJvcik7XG4gICAgICAgICAgICAgIGN0eC5tb3ZlVG8oeF8gLSB3aXNrZXJXaWR0aCwgcmVuZGVyVXBUb1kyIC0gcmVuZGVyQmFyRXJyb3IpO1xuICAgICAgICAgICAgICBjdHgubGluZVRvKHhfICsgd2lza2VyV2lkdGgsIHJlbmRlclVwVG9ZMiAtIHJlbmRlckJhckVycm9yKTtcbiAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb250ZW50LmJhclRvb2x0aXBzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiKDAsIDAsIDApJztcbiAgICAgICAgICAgIGN0eC5mb250ID0gSGVscGVycy5nZXRGb250KHsgd2VpZ2h0OiBvcHRpb25zLmZvbnRXZWlnaHQsIHNpemU6IG9wdGlvbnMuZm9udFNpemVMYWJlbHMsIGZhbWlseTogb3B0aW9ucy5mb250IH0pO1xuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGNvbnRlbnQuYmFyVG9vbHRpcHNbaW5kZXhdIHx8ICcnLCByZW5kZXJTdGFydFggKyB3aWR0aFBlckJhciAvIDIsIHJlbmRlclVwVG9ZMiAtIDMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcblxuICAgICAgaWYgKHRoaXMuY3VycmVudEhpbnQgIT0gbnVsbCkge1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICB2YXIgaFJlY3QgPSB0aGlzLmN1cnJlbnRIaW50LnJlY3QsIGhpbnRzID0gdGhpcy5jdXJyZW50SGludC50ZXh0O1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYigwLCAwLCAwKSc7XG4gICAgICAgIGN0eC5mb250ID0gSGVscGVycy5nZXRGb250KHsgd2VpZ2h0OiBvcHRpb25zLmZvbnRXZWlnaHQsIHNpemU6IG9wdGlvbnMuZm9udFNpemVIaW50LCBmYW1pbHk6IG9wdGlvbnMuZm9udCB9KTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgdmFyIGJveFdpZHRoID0gMDtcbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgaGludHMubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgICAgYm94V2lkdGggPSBNYXRoLm1heChib3hXaWR0aCwgTWF0aC5jZWlsKGN0eC5tZWFzdXJlVGV4dChoaW50c1tpbmRleF0pLndpZHRoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJveFdpZHRoUGFkZGluZyA9IDU7XG4gICAgICAgIHZhciBsaW5lSGVpZ2h0ID0gb3B0aW9ucy5mb250U2l6ZUhpbnQgKiAxLjU7XG4gICAgICAgIHZhciBib3hIZWlnaHQgPSBoaW50cy5sZW5ndGggKiBsaW5lSGVpZ2h0O1xuICAgICAgICB2YXIgZHJhd1ggPSBoUmVjdC5yaWdodCArIDEwLCBkcmF3WSA9IChoUmVjdC50b3AgKyBoUmVjdC5ib3R0b20pIC8gMjtcbiAgICAgICAgYm94V2lkdGggKz0gYm94V2lkdGhQYWRkaW5nICogMjtcbiAgICAgICAgaWYgKGRyYXdYICsgYm94V2lkdGggPiB3aWR0aCkge1xuICAgICAgICAgIGRyYXdYID0gaFJlY3QubGVmdCAtIGJveFdpZHRoIC0gMTA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRyYXdZIC0gYm94SGVpZ2h0IC8gMiA8IDApIHtcbiAgICAgICAgICBkcmF3WSA9IE1hdGguY2VpbChib3hIZWlnaHQgLyAyKSArIDE7XG4gICAgICAgIH0gZWxzZSBpZiAoZHJhd1kgKyBib3hIZWlnaHQgLyAyID4gaGVpZ2h0KSB7XG4gICAgICAgICAgZHJhd1kgPSBoZWlnaHQgLSBib3hIZWlnaHQgLyAyIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBjdHguY2xlYXJSZWN0KGRyYXdYLCBkcmF3WSAtIGJveEhlaWdodCAvIDIsIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5yZWN0KGRyYXdYLCBkcmF3WSAtIGJveEhlaWdodCAvIDIsIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGhpbnRzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICAgIGN0eC5maWxsVGV4dChoaW50c1tpbmRleF0sIGRyYXdYICsgYm94V2lkdGhQYWRkaW5nLCBkcmF3WSAtIGJveEhlaWdodCAvIDIgKyBvcHRpb25zLmZvbnRTaXplSGludCArIGluZGV4ICogbGluZUhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIH1cblxuICAgICAgY3R4LnRyYW5zbGF0ZSgwLjUsIDAuNSk7XG5cbiAgICAgIHRoaXMubGFiZWxQb3NpdGlvbnMgPSBsYWJlbFBvc2l0aW9ucztcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJhckNoYXJ0O1xuICB9KSgpO1xuXG4gIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBCYXJDaGFydDtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cuQmFyQ2hhcnQgPSBCYXJDaGFydDtcbiAgfVxufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=